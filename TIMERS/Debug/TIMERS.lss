
TIMERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001c88  00001d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800068  00800068  00001d24  2**0
                  ALLOC
  3 .stab         00001848  00000000  00000000  00001d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f6d  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000044d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004619  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004789  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000063d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000072bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000806c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008459  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008c27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_1>
       8:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__vector_2>
       c:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__vector_10>
      2c:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 37       	cpi	r26, 0x72	; 114
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e8       	ldi	r30, 0x88	; 136
      78:	fc e1       	ldi	r31, 0x1C	; 28
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <main>
      8a:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MDIO_voidSetPinDirection>:
#include "../Include/MCAL/DIO/DIO_Cfg.h"

#define F_CPU 8000000UL

void MDIO_voidSetPinDirection (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID, DIO_DIRECTION_e A_PINDirection)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7) && (A_PINDirection <= DIO_OUTPUT))
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	08 f0       	brcs	.+2      	; 0xb68 <MDIO_voidSetPinDirection+0x22>
     b66:	09 c1       	rjmp	.+530    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	88 30       	cpi	r24, 0x08	; 8
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <MDIO_voidSetPinDirection+0x2a>
     b6e:	05 c1       	rjmp	.+522    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	08 f0       	brcs	.+2      	; 0xb78 <MDIO_voidSetPinDirection+0x32>
     b76:	01 c1       	rjmp	.+514    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_DIOPort)
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	3d 87       	std	Y+13, r19	; 0x0d
     b80:	2c 87       	std	Y+12, r18	; 0x0c
     b82:	8c 85       	ldd	r24, Y+12	; 0x0c
     b84:	9d 85       	ldd	r25, Y+13	; 0x0d
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <MDIO_voidSetPinDirection+0x48>
     b8c:	4f c0       	rjmp	.+158    	; 0xc2c <MDIO_voidSetPinDirection+0xe6>
     b8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     b90:	3d 85       	ldd	r19, Y+13	; 0x0d
     b92:	22 30       	cpi	r18, 0x02	; 2
     b94:	31 05       	cpc	r19, r1
     b96:	2c f4       	brge	.+10     	; 0xba2 <MDIO_voidSetPinDirection+0x5c>
     b98:	8c 85       	ldd	r24, Y+12	; 0x0c
     b9a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	71 f0       	breq	.+28     	; 0xbbc <MDIO_voidSetPinDirection+0x76>
     ba0:	ec c0       	rjmp	.+472    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
     ba2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ba4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ba6:	22 30       	cpi	r18, 0x02	; 2
     ba8:	31 05       	cpc	r19, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <MDIO_voidSetPinDirection+0x68>
     bac:	77 c0       	rjmp	.+238    	; 0xc9c <MDIO_voidSetPinDirection+0x156>
     bae:	8c 85       	ldd	r24, Y+12	; 0x0c
     bb0:	9d 85       	ldd	r25, Y+13	; 0x0d
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <MDIO_voidSetPinDirection+0x74>
     bb8:	a9 c0       	rjmp	.+338    	; 0xd0c <MDIO_voidSetPinDirection+0x1c6>
     bba:	df c0       	rjmp	.+446    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch (A_PINDirection)
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	3b 87       	std	Y+11, r19	; 0x0b
     bc4:	2a 87       	std	Y+10, r18	; 0x0a
     bc6:	8a 85       	ldd	r24, Y+10	; 0x0a
     bc8:	9b 85       	ldd	r25, Y+11	; 0x0b
     bca:	00 97       	sbiw	r24, 0x00	; 0
     bcc:	31 f0       	breq	.+12     	; 0xbda <MDIO_voidSetPinDirection+0x94>
     bce:	2a 85       	ldd	r18, Y+10	; 0x0a
     bd0:	3b 85       	ldd	r19, Y+11	; 0x0b
     bd2:	21 30       	cpi	r18, 0x01	; 1
     bd4:	31 05       	cpc	r19, r1
     bd6:	b1 f0       	breq	.+44     	; 0xc04 <MDIO_voidSetPinDirection+0xbe>
     bd8:	d0 c0       	rjmp	.+416    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_PINID);
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <MDIO_voidSetPinDirection+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <MDIO_voidSetPinDirection+0xae>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	bb c0       	rjmp	.+374    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_PINID);
     c04:	aa e3       	ldi	r26, 0x3A	; 58
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e3       	ldi	r30, 0x3A	; 58
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <MDIO_voidSetPinDirection+0xdc>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <MDIO_voidSetPinDirection+0xd8>
     c26:	84 2b       	or	r24, r20
     c28:	8c 93       	st	X, r24
     c2a:	a7 c0       	rjmp	.+334    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTB:
			switch (A_PINDirection)
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	39 87       	std	Y+9, r19	; 0x09
     c34:	28 87       	std	Y+8, r18	; 0x08
     c36:	88 85       	ldd	r24, Y+8	; 0x08
     c38:	99 85       	ldd	r25, Y+9	; 0x09
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	31 f0       	breq	.+12     	; 0xc4a <MDIO_voidSetPinDirection+0x104>
     c3e:	28 85       	ldd	r18, Y+8	; 0x08
     c40:	39 85       	ldd	r19, Y+9	; 0x09
     c42:	21 30       	cpi	r18, 0x01	; 1
     c44:	31 05       	cpc	r19, r1
     c46:	b1 f0       	breq	.+44     	; 0xc74 <MDIO_voidSetPinDirection+0x12e>
     c48:	98 c0       	rjmp	.+304    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_PINID);
     c4a:	a7 e3       	ldi	r26, 0x37	; 55
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e7 e3       	ldi	r30, 0x37	; 55
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <MDIO_voidSetPinDirection+0x122>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <MDIO_voidSetPinDirection+0x11e>
     c6c:	80 95       	com	r24
     c6e:	84 23       	and	r24, r20
     c70:	8c 93       	st	X, r24
     c72:	83 c0       	rjmp	.+262    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_PINID);
     c74:	a7 e3       	ldi	r26, 0x37	; 55
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e7 e3       	ldi	r30, 0x37	; 55
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <MDIO_voidSetPinDirection+0x14c>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <MDIO_voidSetPinDirection+0x148>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	6f c0       	rjmp	.+222    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTC:
			switch (A_PINDirection)
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3f 83       	std	Y+7, r19	; 0x07
     ca4:	2e 83       	std	Y+6, r18	; 0x06
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	31 f0       	breq	.+12     	; 0xcba <MDIO_voidSetPinDirection+0x174>
     cae:	2e 81       	ldd	r18, Y+6	; 0x06
     cb0:	3f 81       	ldd	r19, Y+7	; 0x07
     cb2:	21 30       	cpi	r18, 0x01	; 1
     cb4:	31 05       	cpc	r19, r1
     cb6:	b1 f0       	breq	.+44     	; 0xce4 <MDIO_voidSetPinDirection+0x19e>
     cb8:	60 c0       	rjmp	.+192    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_PINID);
     cba:	a4 e3       	ldi	r26, 0x34	; 52
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e4 e3       	ldi	r30, 0x34	; 52
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <MDIO_voidSetPinDirection+0x192>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <MDIO_voidSetPinDirection+0x18e>
     cdc:	80 95       	com	r24
     cde:	84 23       	and	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	4b c0       	rjmp	.+150    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_PINID);
     ce4:	a4 e3       	ldi	r26, 0x34	; 52
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e4 e3       	ldi	r30, 0x34	; 52
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <MDIO_voidSetPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <MDIO_voidSetPinDirection+0x1b8>
     d06:	84 2b       	or	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	37 c0       	rjmp	.+110    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTD:
			switch (A_PINDirection)
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3d 83       	std	Y+5, r19	; 0x05
     d14:	2c 83       	std	Y+4, r18	; 0x04
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	9d 81       	ldd	r25, Y+5	; 0x05
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	31 f0       	breq	.+12     	; 0xd2a <MDIO_voidSetPinDirection+0x1e4>
     d1e:	2c 81       	ldd	r18, Y+4	; 0x04
     d20:	3d 81       	ldd	r19, Y+5	; 0x05
     d22:	21 30       	cpi	r18, 0x01	; 1
     d24:	31 05       	cpc	r19, r1
     d26:	b1 f0       	breq	.+44     	; 0xd54 <MDIO_voidSetPinDirection+0x20e>
     d28:	28 c0       	rjmp	.+80     	; 0xd7a <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_PINID);
     d2a:	a1 e3       	ldi	r26, 0x31	; 49
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e1 e3       	ldi	r30, 0x31	; 49
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <MDIO_voidSetPinDirection+0x202>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <MDIO_voidSetPinDirection+0x1fe>
     d4c:	80 95       	com	r24
     d4e:	84 23       	and	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	13 c0       	rjmp	.+38     	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_PINID);
     d54:	a1 e3       	ldi	r26, 0x31	; 49
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e1 e3       	ldi	r30, 0x31	; 49
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <MDIO_voidSetPinDirection+0x22c>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <MDIO_voidSetPinDirection+0x228>
     d76:	84 2b       	or	r24, r20
     d78:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     d7a:	2d 96       	adiw	r28, 0x0d	; 13
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID, DIO_VALUE_e A_PINValue)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	2d 97       	sbiw	r28, 0x0d	; 13
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	6a 83       	std	Y+2, r22	; 0x02
     da4:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7) && (A_PINValue <= DIO_SET))
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	08 f0       	brcs	.+2      	; 0xdae <MDIO_voidSetPinValue+0x22>
     dac:	09 c1       	rjmp	.+530    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	88 30       	cpi	r24, 0x08	; 8
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <MDIO_voidSetPinValue+0x2a>
     db4:	05 c1       	rjmp	.+522    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	08 f0       	brcs	.+2      	; 0xdbe <MDIO_voidSetPinValue+0x32>
     dbc:	01 c1       	rjmp	.+514    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
	{
		switch (A_DIOPort)
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	3d 87       	std	Y+13, r19	; 0x0d
     dc6:	2c 87       	std	Y+12, r18	; 0x0c
     dc8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dca:	9d 85       	ldd	r25, Y+13	; 0x0d
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <MDIO_voidSetPinValue+0x48>
     dd2:	4f c0       	rjmp	.+158    	; 0xe72 <MDIO_voidSetPinValue+0xe6>
     dd4:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd6:	3d 85       	ldd	r19, Y+13	; 0x0d
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	2c f4       	brge	.+10     	; 0xde8 <MDIO_voidSetPinValue+0x5c>
     dde:	8c 85       	ldd	r24, Y+12	; 0x0c
     de0:	9d 85       	ldd	r25, Y+13	; 0x0d
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	71 f0       	breq	.+28     	; 0xe02 <MDIO_voidSetPinValue+0x76>
     de6:	ec c0       	rjmp	.+472    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
     de8:	2c 85       	ldd	r18, Y+12	; 0x0c
     dea:	3d 85       	ldd	r19, Y+13	; 0x0d
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <MDIO_voidSetPinValue+0x68>
     df2:	77 c0       	rjmp	.+238    	; 0xee2 <MDIO_voidSetPinValue+0x156>
     df4:	8c 85       	ldd	r24, Y+12	; 0x0c
     df6:	9d 85       	ldd	r25, Y+13	; 0x0d
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	91 05       	cpc	r25, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <MDIO_voidSetPinValue+0x74>
     dfe:	a9 c0       	rjmp	.+338    	; 0xf52 <MDIO_voidSetPinValue+0x1c6>
     e00:	df c0       	rjmp	.+446    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch (A_PINValue)
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	3b 87       	std	Y+11, r19	; 0x0b
     e0a:	2a 87       	std	Y+10, r18	; 0x0a
     e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	31 f0       	breq	.+12     	; 0xe20 <MDIO_voidSetPinValue+0x94>
     e14:	2a 85       	ldd	r18, Y+10	; 0x0a
     e16:	3b 85       	ldd	r19, Y+11	; 0x0b
     e18:	21 30       	cpi	r18, 0x01	; 1
     e1a:	31 05       	cpc	r19, r1
     e1c:	b1 f0       	breq	.+44     	; 0xe4a <MDIO_voidSetPinValue+0xbe>
     e1e:	d0 c0       	rjmp	.+416    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_PINID);
     e20:	ab e3       	ldi	r26, 0x3B	; 59
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	eb e3       	ldi	r30, 0x3B	; 59
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <MDIO_voidSetPinValue+0xb2>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <MDIO_voidSetPinValue+0xae>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	bb c0       	rjmp	.+374    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_PINID);
     e4a:	ab e3       	ldi	r26, 0x3B	; 59
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	eb e3       	ldi	r30, 0x3B	; 59
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <MDIO_voidSetPinValue+0xdc>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <MDIO_voidSetPinValue+0xd8>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	a7 c0       	rjmp	.+334    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTB:
			switch (A_PINValue)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	39 87       	std	Y+9, r19	; 0x09
     e7a:	28 87       	std	Y+8, r18	; 0x08
     e7c:	88 85       	ldd	r24, Y+8	; 0x08
     e7e:	99 85       	ldd	r25, Y+9	; 0x09
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	31 f0       	breq	.+12     	; 0xe90 <MDIO_voidSetPinValue+0x104>
     e84:	28 85       	ldd	r18, Y+8	; 0x08
     e86:	39 85       	ldd	r19, Y+9	; 0x09
     e88:	21 30       	cpi	r18, 0x01	; 1
     e8a:	31 05       	cpc	r19, r1
     e8c:	b1 f0       	breq	.+44     	; 0xeba <MDIO_voidSetPinValue+0x12e>
     e8e:	98 c0       	rjmp	.+304    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTB_REG,A_PINID);
     e90:	a8 e3       	ldi	r26, 0x38	; 56
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e8 e3       	ldi	r30, 0x38	; 56
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <MDIO_voidSetPinValue+0x122>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <MDIO_voidSetPinValue+0x11e>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	83 c0       	rjmp	.+262    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTB_REG,A_PINID);
     eba:	a8 e3       	ldi	r26, 0x38	; 56
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e8 e3       	ldi	r30, 0x38	; 56
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <MDIO_voidSetPinValue+0x14c>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <MDIO_voidSetPinValue+0x148>
     edc:	84 2b       	or	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	6f c0       	rjmp	.+222    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTC:
			switch (A_PINValue)
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	3f 83       	std	Y+7, r19	; 0x07
     eea:	2e 83       	std	Y+6, r18	; 0x06
     eec:	8e 81       	ldd	r24, Y+6	; 0x06
     eee:	9f 81       	ldd	r25, Y+7	; 0x07
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	31 f0       	breq	.+12     	; 0xf00 <MDIO_voidSetPinValue+0x174>
     ef4:	2e 81       	ldd	r18, Y+6	; 0x06
     ef6:	3f 81       	ldd	r19, Y+7	; 0x07
     ef8:	21 30       	cpi	r18, 0x01	; 1
     efa:	31 05       	cpc	r19, r1
     efc:	b1 f0       	breq	.+44     	; 0xf2a <MDIO_voidSetPinValue+0x19e>
     efe:	60 c0       	rjmp	.+192    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTC_REG,A_PINID);
     f00:	a5 e3       	ldi	r26, 0x35	; 53
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e3       	ldi	r30, 0x35	; 53
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <MDIO_voidSetPinValue+0x192>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <MDIO_voidSetPinValue+0x18e>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	4b c0       	rjmp	.+150    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTC_REG,A_PINID);
     f2a:	a5 e3       	ldi	r26, 0x35	; 53
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e5 e3       	ldi	r30, 0x35	; 53
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <MDIO_voidSetPinValue+0x1bc>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <MDIO_voidSetPinValue+0x1b8>
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	37 c0       	rjmp	.+110    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTD:
			switch (A_PINValue)
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3d 83       	std	Y+5, r19	; 0x05
     f5a:	2c 83       	std	Y+4, r18	; 0x04
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	31 f0       	breq	.+12     	; 0xf70 <MDIO_voidSetPinValue+0x1e4>
     f64:	2c 81       	ldd	r18, Y+4	; 0x04
     f66:	3d 81       	ldd	r19, Y+5	; 0x05
     f68:	21 30       	cpi	r18, 0x01	; 1
     f6a:	31 05       	cpc	r19, r1
     f6c:	b1 f0       	breq	.+44     	; 0xf9a <MDIO_voidSetPinValue+0x20e>
     f6e:	28 c0       	rjmp	.+80     	; 0xfc0 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTD_REG,A_PINID);
     f70:	a2 e3       	ldi	r26, 0x32	; 50
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e2 e3       	ldi	r30, 0x32	; 50
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <MDIO_voidSetPinValue+0x202>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <MDIO_voidSetPinValue+0x1fe>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	13 c0       	rjmp	.+38     	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTD_REG,A_PINID);
     f9a:	a2 e3       	ldi	r26, 0x32	; 50
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e2 e3       	ldi	r30, 0x32	; 50
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <MDIO_voidSetPinValue+0x22c>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <MDIO_voidSetPinValue+0x228>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     fc0:	2d 96       	adiw	r28, 0x0d	; 13
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <MDIO_GetPinValue>:


DIO_VALUE_e MDIO_GetPinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <MDIO_GetPinValue+0x6>
     fd8:	00 d0       	rcall	.+0      	; 0xfda <MDIO_GetPinValue+0x8>
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	8a 83       	std	Y+2, r24	; 0x02
     fe2:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PINValue;
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7))
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	84 30       	cpi	r24, 0x04	; 4
     fe8:	08 f0       	brcs	.+2      	; 0xfec <MDIO_GetPinValue+0x1a>
     fea:	6b c0       	rjmp	.+214    	; 0x10c2 <MDIO_GetPinValue+0xf0>
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 30       	cpi	r24, 0x08	; 8
     ff0:	08 f0       	brcs	.+2      	; 0xff4 <MDIO_GetPinValue+0x22>
     ff2:	67 c0       	rjmp	.+206    	; 0x10c2 <MDIO_GetPinValue+0xf0>
	{
		switch (A_DIOPort)
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3d 83       	std	Y+5, r19	; 0x05
     ffc:	2c 83       	std	Y+4, r18	; 0x04
     ffe:	4c 81       	ldd	r20, Y+4	; 0x04
    1000:	5d 81       	ldd	r21, Y+5	; 0x05
    1002:	41 30       	cpi	r20, 0x01	; 1
    1004:	51 05       	cpc	r21, r1
    1006:	41 f1       	breq	.+80     	; 0x1058 <MDIO_GetPinValue+0x86>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	91 05       	cpc	r25, r1
    1010:	34 f4       	brge	.+12     	; 0x101e <MDIO_GetPinValue+0x4c>
    1012:	2c 81       	ldd	r18, Y+4	; 0x04
    1014:	3d 81       	ldd	r19, Y+5	; 0x05
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	61 f0       	breq	.+24     	; 0x1034 <MDIO_GetPinValue+0x62>
    101c:	52 c0       	rjmp	.+164    	; 0x10c2 <MDIO_GetPinValue+0xf0>
    101e:	4c 81       	ldd	r20, Y+4	; 0x04
    1020:	5d 81       	ldd	r21, Y+5	; 0x05
    1022:	42 30       	cpi	r20, 0x02	; 2
    1024:	51 05       	cpc	r21, r1
    1026:	51 f1       	breq	.+84     	; 0x107c <MDIO_GetPinValue+0xaa>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	91 05       	cpc	r25, r1
    1030:	b9 f1       	breq	.+110    	; 0x10a0 <MDIO_GetPinValue+0xce>
    1032:	47 c0       	rjmp	.+142    	; 0x10c2 <MDIO_GetPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PINValue = GET_BIT(PINA_REG,A_PINID);
    1034:	e9 e3       	ldi	r30, 0x39	; 57
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a9 01       	movw	r20, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <MDIO_GetPinValue+0x7a>
    1048:	55 95       	asr	r21
    104a:	47 95       	ror	r20
    104c:	8a 95       	dec	r24
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <MDIO_GetPinValue+0x76>
    1050:	ca 01       	movw	r24, r20
    1052:	81 70       	andi	r24, 0x01	; 1
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	35 c0       	rjmp	.+106    	; 0x10c2 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PINValue = GET_BIT(PINB_REG,A_PINID);
    1058:	e6 e3       	ldi	r30, 0x36	; 54
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a9 01       	movw	r20, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <MDIO_GetPinValue+0x9e>
    106c:	55 95       	asr	r21
    106e:	47 95       	ror	r20
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <MDIO_GetPinValue+0x9a>
    1074:	ca 01       	movw	r24, r20
    1076:	81 70       	andi	r24, 0x01	; 1
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	23 c0       	rjmp	.+70     	; 0x10c2 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PINValue = GET_BIT(PINC_REG,A_PINID);
    107c:	e3 e3       	ldi	r30, 0x33	; 51
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a9 01       	movw	r20, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <MDIO_GetPinValue+0xc2>
    1090:	55 95       	asr	r21
    1092:	47 95       	ror	r20
    1094:	8a 95       	dec	r24
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <MDIO_GetPinValue+0xbe>
    1098:	ca 01       	movw	r24, r20
    109a:	81 70       	andi	r24, 0x01	; 1
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	11 c0       	rjmp	.+34     	; 0x10c2 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PINValue = GET_BIT(PIND_REG,A_PINID);
    10a0:	e0 e3       	ldi	r30, 0x30	; 48
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <MDIO_GetPinValue+0xe6>
    10b4:	55 95       	asr	r21
    10b6:	47 95       	ror	r20
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <MDIO_GetPinValue+0xe2>
    10bc:	ca 01       	movw	r24, r20
    10be:	81 70       	andi	r24, 0x01	; 1
    10c0:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
		}
	}
	return local_PINValue;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <MDIO_voidTogglePinValue+0x6>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <MDIO_voidTogglePinValue+0x8>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7))
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <MDIO_voidTogglePinValue+0x18>
    10ea:	72 c0       	rjmp	.+228    	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	88 30       	cpi	r24, 0x08	; 8
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <MDIO_voidTogglePinValue+0x20>
    10f2:	6e c0       	rjmp	.+220    	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
	{
		switch (A_DIOPort)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3c 83       	std	Y+4, r19	; 0x04
    10fc:	2b 83       	std	Y+3, r18	; 0x03
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	91 05       	cpc	r25, r1
    1106:	49 f1       	breq	.+82     	; 0x115a <MDIO_voidTogglePinValue+0x86>
    1108:	2b 81       	ldd	r18, Y+3	; 0x03
    110a:	3c 81       	ldd	r19, Y+4	; 0x04
    110c:	22 30       	cpi	r18, 0x02	; 2
    110e:	31 05       	cpc	r19, r1
    1110:	2c f4       	brge	.+10     	; 0x111c <MDIO_voidTogglePinValue+0x48>
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	61 f0       	breq	.+24     	; 0x1132 <MDIO_voidTogglePinValue+0x5e>
    111a:	5a c0       	rjmp	.+180    	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
    111c:	2b 81       	ldd	r18, Y+3	; 0x03
    111e:	3c 81       	ldd	r19, Y+4	; 0x04
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	71 f1       	breq	.+92     	; 0x1182 <MDIO_voidTogglePinValue+0xae>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	91 05       	cpc	r25, r1
    112e:	e9 f1       	breq	.+122    	; 0x11aa <MDIO_voidTogglePinValue+0xd6>
    1130:	4f c0       	rjmp	.+158    	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_PINID);
    1132:	ab e3       	ldi	r26, 0x3B	; 59
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	eb e3       	ldi	r30, 0x3B	; 59
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <MDIO_voidTogglePinValue+0x7c>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <MDIO_voidTogglePinValue+0x78>
    1154:	84 27       	eor	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	3b c0       	rjmp	.+118    	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_PINID);
    115a:	a8 e3       	ldi	r26, 0x38	; 56
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e8 e3       	ldi	r30, 0x38	; 56
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <MDIO_voidTogglePinValue+0xa4>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <MDIO_voidTogglePinValue+0xa0>
    117c:	84 27       	eor	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	27 c0       	rjmp	.+78     	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_PINID);
    1182:	a5 e3       	ldi	r26, 0x35	; 53
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e3       	ldi	r30, 0x35	; 53
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <MDIO_voidTogglePinValue+0xcc>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <MDIO_voidTogglePinValue+0xc8>
    11a4:	84 27       	eor	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	13 c0       	rjmp	.+38     	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_PINID);
    11aa:	a2 e3       	ldi	r26, 0x32	; 50
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e2 e3       	ldi	r30, 0x32	; 50
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <MDIO_voidTogglePinValue+0xf4>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <MDIO_voidTogglePinValue+0xf0>
    11cc:	84 27       	eor	r24, r20
    11ce:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection (DIO_PORT_e A_DIOPort, u8 A_u8Direction)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <MDIO_voidSetPortDirection+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <MDIO_voidSetPortDirection+0x8>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD))
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	90 f5       	brcc	.+100    	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_DIOPort)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3c 83       	std	Y+4, r19	; 0x04
    11fc:	2b 83       	std	Y+3, r18	; 0x03
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	d1 f0       	breq	.+52     	; 0x123c <MDIO_voidSetPortDirection+0x5e>
    1208:	2b 81       	ldd	r18, Y+3	; 0x03
    120a:	3c 81       	ldd	r19, Y+4	; 0x04
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	2c f4       	brge	.+10     	; 0x121c <MDIO_voidSetPortDirection+0x3e>
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	61 f0       	breq	.+24     	; 0x1232 <MDIO_voidSetPortDirection+0x54>
    121a:	1e c0       	rjmp	.+60     	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	81 f0       	breq	.+32     	; 0x1246 <MDIO_voidSetPortDirection+0x68>
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	81 f0       	breq	.+32     	; 0x1250 <MDIO_voidSetPortDirection+0x72>
    1230:	13 c0       	rjmp	.+38     	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8Direction;
    1232:	ea e3       	ldi	r30, 0x3A	; 58
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	80 83       	st	Z, r24
    123a:	0e c0       	rjmp	.+28     	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8Direction;
    123c:	e7 e3       	ldi	r30, 0x37	; 55
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	80 83       	st	Z, r24
    1244:	09 c0       	rjmp	.+18     	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8Direction;
    1246:	e4 e3       	ldi	r30, 0x34	; 52
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 83       	st	Z, r24
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8Direction;
    1250:	e1 e3       	ldi	r30, 0x31	; 49
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
	}
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (DIO_PORT_e A_DIOPort, u8 A_u8Value)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <MDIO_voidSetPortValue+0x6>
    126c:	00 d0       	rcall	.+0      	; 0x126e <MDIO_voidSetPortValue+0x8>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD))
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	90 f5       	brcc	.+100    	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_DIOPort)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	3c 83       	std	Y+4, r19	; 0x04
    1284:	2b 83       	std	Y+3, r18	; 0x03
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	91 05       	cpc	r25, r1
    128e:	d1 f0       	breq	.+52     	; 0x12c4 <MDIO_voidSetPortValue+0x5e>
    1290:	2b 81       	ldd	r18, Y+3	; 0x03
    1292:	3c 81       	ldd	r19, Y+4	; 0x04
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	2c f4       	brge	.+10     	; 0x12a4 <MDIO_voidSetPortValue+0x3e>
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	61 f0       	breq	.+24     	; 0x12ba <MDIO_voidSetPortValue+0x54>
    12a2:	1e c0       	rjmp	.+60     	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	81 f0       	breq	.+32     	; 0x12ce <MDIO_voidSetPortValue+0x68>
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	91 05       	cpc	r25, r1
    12b6:	81 f0       	breq	.+32     	; 0x12d8 <MDIO_voidSetPortValue+0x72>
    12b8:	13 c0       	rjmp	.+38     	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8Value;
    12ba:	eb e3       	ldi	r30, 0x3B	; 59
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	80 83       	st	Z, r24
    12c2:	0e c0       	rjmp	.+28     	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8Value;
    12c4:	e8 e3       	ldi	r30, 0x38	; 56
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	80 83       	st	Z, r24
    12cc:	09 c0       	rjmp	.+18     	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8Value;
    12ce:	e5 e3       	ldi	r30, 0x35	; 53
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	80 83       	st	Z, r24
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8Value;
    12d8:	e2 e3       	ldi	r30, 0x32	; 50
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
	}
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <MDIO_voidInit>:


void MDIO_voidInit()
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG=CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION
    12f6:	ea e3       	ldi	r30, 0x3A	; 58
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	80 83       	st	Z, r24
					 ,PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG=CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION
    12fe:	e7 e3       	ldi	r30, 0x37	; 55
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	10 82       	st	Z, r1
					 ,PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG=CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION
    1304:	e4 e3       	ldi	r30, 0x34	; 52
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	10 82       	st	Z, r1
					 ,PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG=CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,PD5_INITIAL_DIRECTION,PD4_INITIAL_DIRECTION
    130a:	e1 e3       	ldi	r30, 0x31	; 49
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	10 82       	st	Z, r1
					 ,PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);


	PORTA_REG=CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,PA5_INITIAL_VALUE,PA4_INITIAL_VALUE
    1310:	eb e3       	ldi	r30, 0x3B	; 59
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	10 82       	st	Z, r1
					 ,PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG=CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,PB5_INITIAL_VALUE,PB4_INITIAL_VALUE
    1316:	e8 e3       	ldi	r30, 0x38	; 56
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	10 82       	st	Z, r1
					 ,PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG=CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,PC5_INITIAL_VALUE,PC4_INITIAL_VALUE
    131c:	e5 e3       	ldi	r30, 0x35	; 53
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	10 82       	st	Z, r1
					 ,PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG=CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,PD5_INITIAL_VALUE,PD4_INITIAL_VALUE
    1322:	e2 e3       	ldi	r30, 0x32	; 50
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	10 82       	st	Z, r1
					 ,PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <MEXTI_voidConfig>:
void (*EXTI0_Callback) (void) = NULL;
void (*EXTI1_Callback) (void) = NULL;
void (*EXTI2_Callback) (void) = NULL;

void MEXTI_voidConfig (EXTI_ID A_EXTI_ID, EXTI_SENSE_MODE A_EXTISenseMode)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <MEXTI_voidConfig+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <MEXTI_voidConfig+0x8>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <MEXTI_voidConfig+0xa>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ((A_EXTI_ID<=EXTI2) && (A_EXTISenseMode<= RISING_EDGE))
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	08 f0       	brcs	.+2      	; 0x1348 <MEXTI_voidConfig+0x1a>
    1346:	5e c0       	rjmp	.+188    	; 0x1404 <MEXTI_voidConfig+0xd6>
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	08 f0       	brcs	.+2      	; 0x1350 <MEXTI_voidConfig+0x22>
    134e:	5a c0       	rjmp	.+180    	; 0x1404 <MEXTI_voidConfig+0xd6>
	{
		switch (A_EXTI_ID)
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3e 83       	std	Y+6, r19	; 0x06
    1358:	2d 83       	std	Y+5, r18	; 0x05
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	d1 f0       	breq	.+52     	; 0x1398 <MEXTI_voidConfig+0x6a>
    1364:	2d 81       	ldd	r18, Y+5	; 0x05
    1366:	3e 81       	ldd	r19, Y+6	; 0x06
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	61 f1       	breq	.+88     	; 0x13c6 <MEXTI_voidConfig+0x98>
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	09 f0       	breq	.+2      	; 0x1378 <MEXTI_voidConfig+0x4a>
    1376:	46 c0       	rjmp	.+140    	; 0x1404 <MEXTI_voidConfig+0xd6>
		{
		case EXTI0:
					MCUCR &= ~(SENSE_MODE_MASK << EXTI0_SENSE_MODE_BITS);
    1378:	a5 e5       	ldi	r26, 0x55	; 85
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e5       	ldi	r30, 0x55	; 85
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8c 7f       	andi	r24, 0xFC	; 252
    1384:	8c 93       	st	X, r24
					MCUCR |=  (A_EXTISenseMode << EXTI0_SENSE_MODE_BITS);
    1386:	a5 e5       	ldi	r26, 0x55	; 85
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e5 e5       	ldi	r30, 0x55	; 85
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	90 81       	ld	r25, Z
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	89 2b       	or	r24, r25
    1394:	8c 93       	st	X, r24
    1396:	36 c0       	rjmp	.+108    	; 0x1404 <MEXTI_voidConfig+0xd6>
					break;
		case EXTI1:
					MCUCR &= ~(SENSE_MODE_MASK << EXTI1_SENSE_MODE_BITS);
    1398:	a5 e5       	ldi	r26, 0x55	; 85
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e5       	ldi	r30, 0x55	; 85
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	83 7f       	andi	r24, 0xF3	; 243
    13a4:	8c 93       	st	X, r24
					MCUCR |= (A_EXTISenseMode << EXTI1_SENSE_MODE_BITS);
    13a6:	a5 e5       	ldi	r26, 0x55	; 85
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e5       	ldi	r30, 0x55	; 85
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	28 2f       	mov	r18, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	82 2b       	or	r24, r18
    13c2:	8c 93       	st	X, r24
    13c4:	1f c0       	rjmp	.+62     	; 0x1404 <MEXTI_voidConfig+0xd6>
					break;
		case EXTI2:
					switch (A_EXTISenseMode)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3c 83       	std	Y+4, r19	; 0x04
    13ce:	2b 83       	std	Y+3, r18	; 0x03
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	91 05       	cpc	r25, r1
    13d8:	31 f0       	breq	.+12     	; 0x13e6 <MEXTI_voidConfig+0xb8>
    13da:	2b 81       	ldd	r18, Y+3	; 0x03
    13dc:	3c 81       	ldd	r19, Y+4	; 0x04
    13de:	23 30       	cpi	r18, 0x03	; 3
    13e0:	31 05       	cpc	r19, r1
    13e2:	49 f0       	breq	.+18     	; 0x13f6 <MEXTI_voidConfig+0xc8>
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <MEXTI_voidConfig+0xd6>
					{
					case FALLING_EDGE:
								    	CLR_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS);
    13e6:	a4 e5       	ldi	r26, 0x54	; 84
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e4 e5       	ldi	r30, 0x54	; 84
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8f 7b       	andi	r24, 0xBF	; 191
    13f2:	8c 93       	st	X, r24
    13f4:	07 c0       	rjmp	.+14     	; 0x1404 <MEXTI_voidConfig+0xd6>
									    break;
					case RISING_EDGE:
										SET_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS);
    13f6:	a4 e5       	ldi	r26, 0x54	; 84
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e4 e5       	ldi	r30, 0x54	; 84
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 64       	ori	r24, 0x40	; 64
    1402:	8c 93       	st	X, r24
					}
					break;
		default: break;
		}
	}
}
    1404:	26 96       	adiw	r28, 0x06	; 6
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <MEXTI_voidEnable>:


void MEXTI_voidEnable (EXTI_ID A_EXTI_ID)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <MEXTI_voidEnable+0x6>
    141c:	0f 92       	push	r0
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	89 83       	std	Y+1, r24	; 0x01
	// Input Validation
	if ((A_EXTI_ID<=EXTI2))
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	50 f5       	brcc	.+84     	; 0x147e <MEXTI_voidEnable+0x68>
	{
		switch (A_EXTI_ID)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3b 83       	std	Y+3, r19	; 0x03
    1432:	2a 83       	std	Y+2, r18	; 0x02
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	9b 81       	ldd	r25, Y+3	; 0x03
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	91 05       	cpc	r25, r1
    143c:	89 f0       	breq	.+34     	; 0x1460 <MEXTI_voidEnable+0x4a>
    143e:	2a 81       	ldd	r18, Y+2	; 0x02
    1440:	3b 81       	ldd	r19, Y+3	; 0x03
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	a1 f0       	breq	.+40     	; 0x1470 <MEXTI_voidEnable+0x5a>
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	9b 81       	ldd	r25, Y+3	; 0x03
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	b9 f4       	brne	.+46     	; 0x147e <MEXTI_voidEnable+0x68>
		{
		case EXTI0:
					SET_BIT(GICR,EXTI0_ENABLE_BIT);
    1450:	ab e5       	ldi	r26, 0x5B	; 91
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	eb e5       	ldi	r30, 0x5B	; 91
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 64       	ori	r24, 0x40	; 64
    145c:	8c 93       	st	X, r24
    145e:	0f c0       	rjmp	.+30     	; 0x147e <MEXTI_voidEnable+0x68>
					break;
		case EXTI1:
					SET_BIT(GICR,EXTI1_ENABLE_BIT);
    1460:	ab e5       	ldi	r26, 0x5B	; 91
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	eb e5       	ldi	r30, 0x5B	; 91
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	80 68       	ori	r24, 0x80	; 128
    146c:	8c 93       	st	X, r24
    146e:	07 c0       	rjmp	.+14     	; 0x147e <MEXTI_voidEnable+0x68>
					break;
		case EXTI2:
					SET_BIT(GICR,EXTI2_ENABLE_BIT);
    1470:	ab e5       	ldi	r26, 0x5B	; 91
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	eb e5       	ldi	r30, 0x5B	; 91
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 62       	ori	r24, 0x20	; 32
    147c:	8c 93       	st	X, r24
					break;
		default: break;
		}
	}
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <MEXTI_voidDisable>:
void MEXTI_voidDisable (EXTI_ID A_EXTI_ID)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <MEXTI_voidDisable+0x6>
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
	// Input Validation
	if ((A_EXTI_ID<=EXTI2))
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	50 f5       	brcc	.+84     	; 0x14f2 <MEXTI_voidDisable+0x68>
	{
		switch (A_EXTI_ID)
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3b 83       	std	Y+3, r19	; 0x03
    14a6:	2a 83       	std	Y+2, r18	; 0x02
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	9b 81       	ldd	r25, Y+3	; 0x03
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	89 f0       	breq	.+34     	; 0x14d4 <MEXTI_voidDisable+0x4a>
    14b2:	2a 81       	ldd	r18, Y+2	; 0x02
    14b4:	3b 81       	ldd	r19, Y+3	; 0x03
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	a1 f0       	breq	.+40     	; 0x14e4 <MEXTI_voidDisable+0x5a>
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	9b 81       	ldd	r25, Y+3	; 0x03
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	b9 f4       	brne	.+46     	; 0x14f2 <MEXTI_voidDisable+0x68>
		{
		case EXTI0:
					CLR_BIT(GICR,EXTI0_ENABLE_BIT);
    14c4:	ab e5       	ldi	r26, 0x5B	; 91
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	eb e5       	ldi	r30, 0x5B	; 91
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8f 7b       	andi	r24, 0xBF	; 191
    14d0:	8c 93       	st	X, r24
    14d2:	0f c0       	rjmp	.+30     	; 0x14f2 <MEXTI_voidDisable+0x68>
					break;
		case EXTI1:
					CLR_BIT(GICR,EXTI1_ENABLE_BIT);
    14d4:	ab e5       	ldi	r26, 0x5B	; 91
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	eb e5       	ldi	r30, 0x5B	; 91
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8f 77       	andi	r24, 0x7F	; 127
    14e0:	8c 93       	st	X, r24
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <MEXTI_voidDisable+0x68>
					break;
		case EXTI2:
					CLR_BIT(GICR,EXTI2_ENABLE_BIT);
    14e4:	ab e5       	ldi	r26, 0x5B	; 91
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e5       	ldi	r30, 0x5B	; 91
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7d       	andi	r24, 0xDF	; 223
    14f0:	8c 93       	st	X, r24
					break;
		default: break;
		}
	}
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <MEXTI_voidClearFlag>:

void MEXTI_voidClearFlag (EXTI_ID A_EXTI_ID)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <MEXTI_voidClearFlag+0x6>
    1504:	0f 92       	push	r0
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	89 83       	std	Y+1, r24	; 0x01
	// Input Validation
	if ((A_EXTI_ID<=EXTI2))
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	83 30       	cpi	r24, 0x03	; 3
    1510:	50 f5       	brcc	.+84     	; 0x1566 <MEXTI_voidClearFlag+0x68>
	{
		switch (A_EXTI_ID)
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3b 83       	std	Y+3, r19	; 0x03
    151a:	2a 83       	std	Y+2, r18	; 0x02
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	9b 81       	ldd	r25, Y+3	; 0x03
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	91 05       	cpc	r25, r1
    1524:	89 f0       	breq	.+34     	; 0x1548 <MEXTI_voidClearFlag+0x4a>
    1526:	2a 81       	ldd	r18, Y+2	; 0x02
    1528:	3b 81       	ldd	r19, Y+3	; 0x03
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	a1 f0       	breq	.+40     	; 0x1558 <MEXTI_voidClearFlag+0x5a>
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	9b 81       	ldd	r25, Y+3	; 0x03
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	b9 f4       	brne	.+46     	; 0x1566 <MEXTI_voidClearFlag+0x68>
		{
		case EXTI0:
					SET_BIT(GIFR,EXTI0_ENABLE_BIT);
    1538:	aa e5       	ldi	r26, 0x5A	; 90
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	ea e5       	ldi	r30, 0x5A	; 90
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 64       	ori	r24, 0x40	; 64
    1544:	8c 93       	st	X, r24
    1546:	0f c0       	rjmp	.+30     	; 0x1566 <MEXTI_voidClearFlag+0x68>
					break;
		case EXTI1:
					SET_BIT(GIFR,EXTI1_ENABLE_BIT);
    1548:	aa e5       	ldi	r26, 0x5A	; 90
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	ea e5       	ldi	r30, 0x5A	; 90
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	80 68       	ori	r24, 0x80	; 128
    1554:	8c 93       	st	X, r24
    1556:	07 c0       	rjmp	.+14     	; 0x1566 <MEXTI_voidClearFlag+0x68>
					break;
		case EXTI2:
					SET_BIT(GIFR,EXTI2_ENABLE_BIT);
    1558:	aa e5       	ldi	r26, 0x5A	; 90
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ea e5       	ldi	r30, 0x5A	; 90
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	80 62       	ori	r24, 0x20	; 32
    1564:	8c 93       	st	X, r24
					break;
		default: break;
		}
	}
}
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <MEXTI_voidSetCallBack>:

void MEXTI_voidSetCallBack (EXTI_ID A_EXTI_ID, void(*A_ptrToFunc)(void))
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <MEXTI_voidSetCallBack+0x6>
    1578:	00 d0       	rcall	.+0      	; 0x157a <MEXTI_voidSetCallBack+0x8>
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	7b 83       	std	Y+3, r23	; 0x03
    1584:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ((A_EXTI_ID<=EXTI2) && (A_ptrToFunc != NULL))
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	58 f5       	brcc	.+86     	; 0x15e2 <MEXTI_voidSetCallBack+0x70>
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	9b 81       	ldd	r25, Y+3	; 0x03
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	39 f1       	breq	.+78     	; 0x15e2 <MEXTI_voidSetCallBack+0x70>
	{
		switch (A_EXTI_ID)
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	3d 83       	std	Y+5, r19	; 0x05
    159c:	2c 83       	std	Y+4, r18	; 0x04
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	9d 81       	ldd	r25, Y+5	; 0x05
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	91 05       	cpc	r25, r1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <MEXTI_voidSetCallBack+0x56>
    15a8:	2c 81       	ldd	r18, Y+4	; 0x04
    15aa:	3d 81       	ldd	r19, Y+5	; 0x05
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	31 05       	cpc	r19, r1
    15b0:	91 f0       	breq	.+36     	; 0x15d6 <MEXTI_voidSetCallBack+0x64>
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	9d 81       	ldd	r25, Y+5	; 0x05
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	a1 f4       	brne	.+40     	; 0x15e2 <MEXTI_voidSetCallBack+0x70>
		{
		case EXTI0:
					EXTI0_Callback = A_ptrToFunc;
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	9b 81       	ldd	r25, Y+3	; 0x03
    15be:	90 93 69 00 	sts	0x0069, r25
    15c2:	80 93 68 00 	sts	0x0068, r24
    15c6:	0d c0       	rjmp	.+26     	; 0x15e2 <MEXTI_voidSetCallBack+0x70>
					break;
		case EXTI1:
					EXTI1_Callback = A_ptrToFunc;
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	9b 81       	ldd	r25, Y+3	; 0x03
    15cc:	90 93 6b 00 	sts	0x006B, r25
    15d0:	80 93 6a 00 	sts	0x006A, r24
    15d4:	06 c0       	rjmp	.+12     	; 0x15e2 <MEXTI_voidSetCallBack+0x70>
					break;
		case EXTI2:
					EXTI2_Callback = A_ptrToFunc;
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	9b 81       	ldd	r25, Y+3	; 0x03
    15da:	90 93 6d 00 	sts	0x006D, r25
    15de:	80 93 6c 00 	sts	0x006C, r24
					break;
		default: break;
		}
	}
}
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	11 24       	eor	r1, r1
    15fc:	2f 93       	push	r18
    15fe:	3f 93       	push	r19
    1600:	4f 93       	push	r20
    1602:	5f 93       	push	r21
    1604:	6f 93       	push	r22
    1606:	7f 93       	push	r23
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	af 93       	push	r26
    160e:	bf 93       	push	r27
    1610:	ef 93       	push	r30
    1612:	ff 93       	push	r31
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
	if (EXTI0_Callback != NULL)
    161c:	80 91 68 00 	lds	r24, 0x0068
    1620:	90 91 69 00 	lds	r25, 0x0069
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	29 f0       	breq	.+10     	; 0x1632 <__vector_1+0x40>
	{
		EXTI0_Callback ();
    1628:	e0 91 68 00 	lds	r30, 0x0068
    162c:	f0 91 69 00 	lds	r31, 0x0069
    1630:	09 95       	icall
	}
}
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	ff 91       	pop	r31
    1638:	ef 91       	pop	r30
    163a:	bf 91       	pop	r27
    163c:	af 91       	pop	r26
    163e:	9f 91       	pop	r25
    1640:	8f 91       	pop	r24
    1642:	7f 91       	pop	r23
    1644:	6f 91       	pop	r22
    1646:	5f 91       	pop	r21
    1648:	4f 91       	pop	r20
    164a:	3f 91       	pop	r19
    164c:	2f 91       	pop	r18
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	0f 90       	pop	r0
    1654:	1f 90       	pop	r1
    1656:	18 95       	reti

00001658 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    1658:	1f 92       	push	r1
    165a:	0f 92       	push	r0
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	0f 92       	push	r0
    1660:	11 24       	eor	r1, r1
    1662:	2f 93       	push	r18
    1664:	3f 93       	push	r19
    1666:	4f 93       	push	r20
    1668:	5f 93       	push	r21
    166a:	6f 93       	push	r22
    166c:	7f 93       	push	r23
    166e:	8f 93       	push	r24
    1670:	9f 93       	push	r25
    1672:	af 93       	push	r26
    1674:	bf 93       	push	r27
    1676:	ef 93       	push	r30
    1678:	ff 93       	push	r31
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
	if (EXTI1_Callback != NULL)
    1682:	80 91 6a 00 	lds	r24, 0x006A
    1686:	90 91 6b 00 	lds	r25, 0x006B
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	29 f0       	breq	.+10     	; 0x1698 <__vector_2+0x40>
	{
		EXTI1_Callback ();
    168e:	e0 91 6a 00 	lds	r30, 0x006A
    1692:	f0 91 6b 00 	lds	r31, 0x006B
    1696:	09 95       	icall
	}
}
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	ff 91       	pop	r31
    169e:	ef 91       	pop	r30
    16a0:	bf 91       	pop	r27
    16a2:	af 91       	pop	r26
    16a4:	9f 91       	pop	r25
    16a6:	8f 91       	pop	r24
    16a8:	7f 91       	pop	r23
    16aa:	6f 91       	pop	r22
    16ac:	5f 91       	pop	r21
    16ae:	4f 91       	pop	r20
    16b0:	3f 91       	pop	r19
    16b2:	2f 91       	pop	r18
    16b4:	0f 90       	pop	r0
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	0f 90       	pop	r0
    16ba:	1f 90       	pop	r1
    16bc:	18 95       	reti

000016be <__vector_3>:



void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    16be:	1f 92       	push	r1
    16c0:	0f 92       	push	r0
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	0f 92       	push	r0
    16c6:	11 24       	eor	r1, r1
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	ef 93       	push	r30
    16de:	ff 93       	push	r31
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
	if (EXTI2_Callback != NULL)
    16e8:	80 91 6c 00 	lds	r24, 0x006C
    16ec:	90 91 6d 00 	lds	r25, 0x006D
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	29 f0       	breq	.+10     	; 0x16fe <__vector_3+0x40>
	{
		EXTI2_Callback ();
    16f4:	e0 91 6c 00 	lds	r30, 0x006C
    16f8:	f0 91 6d 00 	lds	r31, 0x006D
    16fc:	09 95       	icall
	}
}
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	ff 91       	pop	r31
    1704:	ef 91       	pop	r30
    1706:	bf 91       	pop	r27
    1708:	af 91       	pop	r26
    170a:	9f 91       	pop	r25
    170c:	8f 91       	pop	r24
    170e:	7f 91       	pop	r23
    1710:	6f 91       	pop	r22
    1712:	5f 91       	pop	r21
    1714:	4f 91       	pop	r20
    1716:	3f 91       	pop	r19
    1718:	2f 91       	pop	r18
    171a:	0f 90       	pop	r0
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	0f 90       	pop	r0
    1720:	1f 90       	pop	r1
    1722:	18 95       	reti

00001724 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_configuration.h"


void MGI_voidEnable (void)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    172c:	af e5       	ldi	r26, 0x5F	; 95
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ef e5       	ldi	r30, 0x5F	; 95
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	80 68       	ori	r24, 0x80	; 128
    1738:	8c 93       	st	X, r24
}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <MGI_voidDisable>:
void MGI_voidDisable (void)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    1748:	af e5       	ldi	r26, 0x5F	; 95
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	ef e5       	ldi	r30, 0x5F	; 95
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8f 77       	andi	r24, 0x7F	; 127
    1754:	8c 93       	st	X, r24
}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <HLED_voidTurnOn>:
 * HAL
 */


void HLED_voidTurnOn  (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <HLED_voidTurnOn+0x6>
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_SET);
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	6a 81       	ldd	r22, Y+2	; 0x02
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
}
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <HLED_voidTurnOff>:
void HLED_voidTurnOff (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <HLED_voidTurnOff+0x6>
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_RESET);
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	6a 81       	ldd	r22, Y+2	; 0x02
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
}
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <HLED_voidToggleLED>:
void HLED_voidToggleLED (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <HLED_voidToggleLED+0x6>
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_DIOPort, A_PINID);
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	48 2f       	mov	r20, r24
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	ca 01       	movw	r24, r20
    17bc:	b9 01       	movw	r22, r18
    17be:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <MDIO_voidTogglePinValue>
}
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <MTIMER0_voidInit>:

void (*TIMER0_OVF_CALLBACK)(void) = NULL;
void (*TIMER0_CTC_CALLBACK)(void) = NULL;

void MTIMER0_voidInit (void)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
		// Start Timer by setting its Clock
		TCCR0 &= TIMER0_CLK_MASK;
		TCCR0 |= TIMER0_CLK_CFG;
	#elif TIMER0_MODE == FAST_PWM_MODE
		// Set Wave Generation to PWM Mode
		SET_BIT(TCCR0,3);
    17d4:	a3 e5       	ldi	r26, 0x53	; 83
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e3 e5       	ldi	r30, 0x53	; 83
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	88 60       	ori	r24, 0x08	; 8
    17e0:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
    17e2:	a3 e5       	ldi	r26, 0x53	; 83
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e3 e5       	ldi	r30, 0x53	; 83
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 64       	ori	r24, 0x40	; 64
    17ee:	8c 93       	st	X, r24

		// Turn of OVF and CTC Interrupts
		CLR_BIT(TIMSK,1);
    17f0:	a9 e5       	ldi	r26, 0x59	; 89
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e9 e5       	ldi	r30, 0x59	; 89
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	8d 7f       	andi	r24, 0xFD	; 253
    17fc:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,0);
    17fe:	a9 e5       	ldi	r26, 0x59	; 89
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e9 e5       	ldi	r30, 0x59	; 89
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	8e 7f       	andi	r24, 0xFE	; 254
    180a:	8c 93       	st	X, r24

		// set OCR0 Value
		OCR0 = FAST_PWM_MODE_VALUE;
    180c:	ec e5       	ldi	r30, 0x5C	; 92
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	83 e6       	ldi	r24, 0x63	; 99
    1812:	80 83       	st	Z, r24

		// set OC0 Pin Mode (Inverting or Non-Inverting)
		// Start Timer
		TCCR0 &= TIMER0_CLK_OC0_MASK;
    1814:	a3 e5       	ldi	r26, 0x53	; 83
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e3 e5       	ldi	r30, 0x53	; 83
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	88 7c       	andi	r24, 0xC8	; 200
    1820:	8c 93       	st	X, r24
		TCCR0 |= (TIMER0_CLK_CFG | (OC0_FAST_PWM_MODE	<<4));
    1822:	a3 e5       	ldi	r26, 0x53	; 83
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e3 e5       	ldi	r30, 0x53	; 83
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	82 62       	ori	r24, 0x22	; 34
    182e:	8c 93       	st	X, r24
	#endif
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <MTIMER0_voidSetPreloadValue>:

void MTIMER0_voidSetPreloadValue (u8 A_u8NoOfTicks)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	0f 92       	push	r0
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8NoOfTicks;
    1842:	e2 e5       	ldi	r30, 0x52	; 82
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	80 83       	st	Z, r24
}
    184a:	0f 90       	pop	r0
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <MTIMER0_voidSetOCR0Value>:

void MTIMER0_voidSetOCR0Value (u8 A_u8OCR0Value)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	0f 92       	push	r0
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8OCR0Value;
    185e:	ec e5       	ldi	r30, 0x5C	; 92
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	80 83       	st	Z, r24
}
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <MTIMER0_voidStopTimer>:

void MTIMER0_voidStopTimer()
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLK_MASK;
    1876:	a3 e5       	ldi	r26, 0x53	; 83
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e3 e5       	ldi	r30, 0x53	; 83
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	88 7f       	andi	r24, 0xF8	; 248
    1882:	8c 93       	st	X, r24
}
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <MTIMER0_voidSetOVFCallback>:


void MTIMER0_voidSetOVFCallback (void (*A_PtrToFunc)(void))
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <MTIMER0_voidSetOVFCallback+0x6>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	31 f0       	breq	.+12     	; 0x18ac <MTIMER0_voidSetOVFCallback+0x22>
	{
		TIMER0_OVF_CALLBACK = A_PtrToFunc;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	90 93 6f 00 	sts	0x006F, r25
    18a8:	80 93 6e 00 	sts	0x006E, r24
	}
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <MTIMER0_voidSetCTCCallback>:

void MTIMER0_voidSetCTCCallback (void (*A_PtrToFunc)(void))
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <MTIMER0_voidSetCTCCallback+0x6>
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	9a 81       	ldd	r25, Y+2	; 0x02
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	31 f0       	breq	.+12     	; 0x18d8 <MTIMER0_voidSetCTCCallback+0x22>
	{
		TIMER0_CTC_CALLBACK = A_PtrToFunc;
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	90 93 71 00 	sts	0x0071, r25
    18d4:	80 93 70 00 	sts	0x0070, r24
	}
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <__vector_11>:



void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    18e2:	1f 92       	push	r1
    18e4:	0f 92       	push	r0
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	0f 92       	push	r0
    18ea:	11 24       	eor	r1, r1
    18ec:	2f 93       	push	r18
    18ee:	3f 93       	push	r19
    18f0:	4f 93       	push	r20
    18f2:	5f 93       	push	r21
    18f4:	6f 93       	push	r22
    18f6:	7f 93       	push	r23
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	ef 93       	push	r30
    1902:	ff 93       	push	r31
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CALLBACK != NULL)
    190c:	80 91 6e 00 	lds	r24, 0x006E
    1910:	90 91 6f 00 	lds	r25, 0x006F
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	29 f0       	breq	.+10     	; 0x1922 <__vector_11+0x40>
	{
		TIMER0_OVF_CALLBACK();
    1918:	e0 91 6e 00 	lds	r30, 0x006E
    191c:	f0 91 6f 00 	lds	r31, 0x006F
    1920:	09 95       	icall
	}
}
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	ff 91       	pop	r31
    1928:	ef 91       	pop	r30
    192a:	bf 91       	pop	r27
    192c:	af 91       	pop	r26
    192e:	9f 91       	pop	r25
    1930:	8f 91       	pop	r24
    1932:	7f 91       	pop	r23
    1934:	6f 91       	pop	r22
    1936:	5f 91       	pop	r21
    1938:	4f 91       	pop	r20
    193a:	3f 91       	pop	r19
    193c:	2f 91       	pop	r18
    193e:	0f 90       	pop	r0
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	0f 90       	pop	r0
    1944:	1f 90       	pop	r1
    1946:	18 95       	reti

00001948 <__vector_10>:


void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1948:	1f 92       	push	r1
    194a:	0f 92       	push	r0
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	0f 92       	push	r0
    1950:	11 24       	eor	r1, r1
    1952:	2f 93       	push	r18
    1954:	3f 93       	push	r19
    1956:	4f 93       	push	r20
    1958:	5f 93       	push	r21
    195a:	6f 93       	push	r22
    195c:	7f 93       	push	r23
    195e:	8f 93       	push	r24
    1960:	9f 93       	push	r25
    1962:	af 93       	push	r26
    1964:	bf 93       	push	r27
    1966:	ef 93       	push	r30
    1968:	ff 93       	push	r31
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_CTC_CALLBACK != NULL)
    1972:	80 91 70 00 	lds	r24, 0x0070
    1976:	90 91 71 00 	lds	r25, 0x0071
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	29 f0       	breq	.+10     	; 0x1988 <__vector_10+0x40>
	{
		TIMER0_CTC_CALLBACK();
    197e:	e0 91 70 00 	lds	r30, 0x0070
    1982:	f0 91 71 00 	lds	r31, 0x0071
    1986:	09 95       	icall
	}
}
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	ff 91       	pop	r31
    198e:	ef 91       	pop	r30
    1990:	bf 91       	pop	r27
    1992:	af 91       	pop	r26
    1994:	9f 91       	pop	r25
    1996:	8f 91       	pop	r24
    1998:	7f 91       	pop	r23
    199a:	6f 91       	pop	r22
    199c:	5f 91       	pop	r21
    199e:	4f 91       	pop	r20
    19a0:	3f 91       	pop	r19
    19a2:	2f 91       	pop	r18
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	0f 90       	pop	r0
    19aa:	1f 90       	pop	r1
    19ac:	18 95       	reti

000019ae <MTIMER1_voidInit>:


void MTIMER1_voidInit()
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
	// Select TIMER 1 MODE ==> 14
	CLR_BIT(TCCR1A,0);
    19b6:	af e4       	ldi	r26, 0x4F	; 79
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ef e4       	ldi	r30, 0x4F	; 79
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8e 7f       	andi	r24, 0xFE	; 254
    19c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    19c4:	af e4       	ldi	r26, 0x4F	; 79
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	ef e4       	ldi	r30, 0x4F	; 79
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	82 60       	ori	r24, 0x02	; 2
    19d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    19d2:	ae e4       	ldi	r26, 0x4E	; 78
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ee e4       	ldi	r30, 0x4E	; 78
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	88 60       	ori	r24, 0x08	; 8
    19de:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    19e0:	ae e4       	ldi	r26, 0x4E	; 78
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ee e4       	ldi	r30, 0x4E	; 78
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	80 61       	ori	r24, 0x10	; 16
    19ec:	8c 93       	st	X, r24

	// Non-Inverting Mode for OC1A
	CLR_BIT(TCCR1A,6);
    19ee:	af e4       	ldi	r26, 0x4F	; 79
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ef e4       	ldi	r30, 0x4F	; 79
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 7b       	andi	r24, 0xBF	; 191
    19fa:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,7);
    19fc:	af e4       	ldi	r26, 0x4F	; 79
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	ef e4       	ldi	r30, 0x4F	; 79
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	80 68       	ori	r24, 0x80	; 128
    1a08:	8c 93       	st	X, r24

	// ICR1 = 19999
	ICR1 = 19999;
    1a0a:	e6 e4       	ldi	r30, 0x46	; 70
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	8f e1       	ldi	r24, 0x1F	; 31
    1a10:	9e e4       	ldi	r25, 0x4E	; 78
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24

	//OCR1A
	OCR1A = 1500;
    1a16:	ea e4       	ldi	r30, 0x4A	; 74
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	8c ed       	ldi	r24, 0xDC	; 220
    1a1c:	95 e0       	ldi	r25, 0x05	; 5
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24

	// Start Timer
	CLR_BIT(TCCR1B,2);
    1a22:	ae e4       	ldi	r26, 0x4E	; 78
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	ee e4       	ldi	r30, 0x4E	; 78
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8b 7f       	andi	r24, 0xFB	; 251
    1a2e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    1a30:	ae e4       	ldi	r26, 0x4E	; 78
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	ee e4       	ldi	r30, 0x4E	; 78
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	82 60       	ori	r24, 0x02	; 2
    1a3c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
    1a3e:	ae e4       	ldi	r26, 0x4E	; 78
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	ee e4       	ldi	r30, 0x4E	; 78
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8e 7f       	andi	r24, 0xFE	; 254
    1a4a:	8c 93       	st	X, r24
}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <MTIMER1_voidSetOCR1AValue>:

void MTIMER1_voidSetOCR1AValue (u16 A_u16Value)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <MTIMER1_voidSetOCR1AValue+0x6>
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16Value;
    1a60:	ea e4       	ldi	r30, 0x4A	; 74
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
}
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <MTIMER1_voidInitSWICU>:

void MTIMER1_voidInitSWICU()
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	// Start Timer by setting prescaler
	CLR_BIT(TCCR1B,2);
    1a7e:	ae e4       	ldi	r26, 0x4E	; 78
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	ee e4       	ldi	r30, 0x4E	; 78
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	8b 7f       	andi	r24, 0xFB	; 251
    1a8a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    1a8c:	ae e4       	ldi	r26, 0x4E	; 78
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	ee e4       	ldi	r30, 0x4E	; 78
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	82 60       	ori	r24, 0x02	; 2
    1a98:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
    1a9a:	ae e4       	ldi	r26, 0x4E	; 78
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	ee e4       	ldi	r30, 0x4E	; 78
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	8e 7f       	andi	r24, 0xFE	; 254
    1aa6:	8c 93       	st	X, r24
}
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <MTIMERS_voidSetTimer1Value>:
void MTIMERS_voidSetTimer1Value(u16 A_u16Value)
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <MTIMERS_voidSetTimer1Value+0x6>
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = A_u16Value;
    1abc:	ec e4       	ldi	r30, 0x4C	; 76
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	80 83       	st	Z, r24
}
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <MTIMERS_u16ReadTimer1Value>:

u16 MTIMERS_u16ReadTimer1Value(void)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1ada:	ec e4       	ldi	r30, 0x4C	; 76
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
}
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <WDT_voidEnable>:
#include "../Include/MCAL/WDT/WDT_Interface.h"
#include "../Include/MCAL/WDT/WDT_private.h"
#include "../Include/MCAL/WDT/WDT_Cfg.h"

void WDT_voidEnable()
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	WDTCR = 0b00001111;
    1af0:	e1 e4       	ldi	r30, 0x41	; 65
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	8f e0       	ldi	r24, 0x0F	; 15
    1af6:	80 83       	st	Z, r24
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <WDT_voidDisable>:

void WDT_voidDisable()
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62

}
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <main>:



// WDT
int main ()
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	2e 97       	sbiw	r28, 0x0e	; 14
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidInit();
    1b20:	0e 94 77 09 	call	0x12ee	; 0x12ee <MDIO_voidInit>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e0       	ldi	r26, 0x00	; 0
    1b2a:	b0 e4       	ldi	r27, 0x40	; 64
    1b2c:	8b 87       	std	Y+11, r24	; 0x0b
    1b2e:	9c 87       	std	Y+12, r25	; 0x0c
    1b30:	ad 87       	std	Y+13, r26	; 0x0d
    1b32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4a ef       	ldi	r20, 0xFA	; 250
    1b42:	54 e4       	ldi	r21, 0x44	; 68
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8f 83       	std	Y+7, r24	; 0x07
    1b4e:	98 87       	std	Y+8, r25	; 0x08
    1b50:	a9 87       	std	Y+9, r26	; 0x09
    1b52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <main+0x6a>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	3f c0       	rjmp	.+126    	; 0x1bf4 <main+0xe8>
	else if (__tmp > 65535)
    1b76:	6f 81       	ldd	r22, Y+7	; 0x07
    1b78:	78 85       	ldd	r23, Y+8	; 0x08
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	57 e4       	ldi	r21, 0x47	; 71
    1b86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	4c f5       	brge	.+82     	; 0x1be0 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e2       	ldi	r20, 0x20	; 32
    1b9c:	51 e4       	ldi	r21, 0x41	; 65
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	0f c0       	rjmp	.+30     	; 0x1bd6 <main+0xca>
    1bb8:	88 ec       	ldi	r24, 0xC8	; 200
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <main+0xb8>
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
    1bca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	69 f7       	brne	.-38     	; 0x1bb8 <main+0xac>
    1bde:	14 c0       	rjmp	.+40     	; 0x1c08 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <main+0xf4>
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLED_voidTurnOn(DIO_PORTA,PIN0);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	0e 94 ae 0b 	call	0x175c	; 0x175c <HLED_voidTurnOn>
	WDT_voidEnable();
    1c10:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <WDT_voidEnable>
    1c14:	ff cf       	rjmp	.-2      	; 0x1c14 <main+0x108>

00001c16 <__prologue_saves__>:
    1c16:	2f 92       	push	r2
    1c18:	3f 92       	push	r3
    1c1a:	4f 92       	push	r4
    1c1c:	5f 92       	push	r5
    1c1e:	6f 92       	push	r6
    1c20:	7f 92       	push	r7
    1c22:	8f 92       	push	r8
    1c24:	9f 92       	push	r9
    1c26:	af 92       	push	r10
    1c28:	bf 92       	push	r11
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	ca 1b       	sub	r28, r26
    1c40:	db 0b       	sbc	r29, r27
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	09 94       	ijmp

00001c4e <__epilogue_restores__>:
    1c4e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c50:	39 88       	ldd	r3, Y+17	; 0x11
    1c52:	48 88       	ldd	r4, Y+16	; 0x10
    1c54:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c56:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c58:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c60:	b9 84       	ldd	r11, Y+9	; 0x09
    1c62:	c8 84       	ldd	r12, Y+8	; 0x08
    1c64:	df 80       	ldd	r13, Y+7	; 0x07
    1c66:	ee 80       	ldd	r14, Y+6	; 0x06
    1c68:	fd 80       	ldd	r15, Y+5	; 0x05
    1c6a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c6c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c6e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c70:	b9 81       	ldd	r27, Y+1	; 0x01
    1c72:	ce 0f       	add	r28, r30
    1c74:	d1 1d       	adc	r29, r1
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	ed 01       	movw	r28, r26
    1c82:	08 95       	ret

00001c84 <_exit>:
    1c84:	f8 94       	cli

00001c86 <__stop_program>:
    1c86:	ff cf       	rjmp	.-2      	; 0x1c86 <__stop_program>
