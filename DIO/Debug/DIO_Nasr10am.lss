
DIO_Nasr10am.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00003368  000033fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800180  00800180  0000351c  2**0
                  ALLOC
  3 .stab         00002cdc  00000000  00000000  0000351c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001384  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000757c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000771c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000790e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b09f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c278  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c438  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c72e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__vector_1>
       8:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__vector_2>
       c:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 24 19 	call	0x3248	; 0x3248 <main>
      8a:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a7 19 	jmp	0x334e	; 0x334e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MADC_voidInit>:
#include "../Include/MCAL/ADC/ADC_private.h"
#include "../Include/MCAL/ADC/ADC_CFG.h"


void MADC_voidInit (void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	// 1 - Select AVCC with external capacitor at AREF pin
	CLR_BIT(ADMUX,7);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 77       	andi	r24, 0x7F	; 127
     e42:	8c 93       	st	X, r24
	SET_BIT(ADMUX,6);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24

	// 2 - Right Adjustment
	CLR_BIT(ADMUX,5);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24

	// 3 - Disable Auto Trigger
	CLR_BIT(ADCSRA,5);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8f 7d       	andi	r24, 0xDF	; 223
     e6c:	8c 93       	st	X, r24

	// 4 - Select CLK/64
	CLR_BIT(ADCSRA,0);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	84 60       	ori	r24, 0x04	; 4
     e96:	8c 93       	st	X, r24

	// 5 - Enable ADC
	SET_BIT(ADCSRA,7);
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 68       	ori	r24, 0x80	; 128
     ea4:	8c 93       	st	X, r24

}
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <MADC_u16GetDigitalvalue>:

u16 MADC_u16GetDigitalvalue (ADC_CHANNELS A_AdcChannel)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <MADC_u16GetDigitalvalue+0x6>
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16DigitalValue=0;
     eba:	1a 82       	std	Y+2, r1	; 0x02
     ebc:	19 82       	std	Y+1, r1	; 0x01
	if (A_AdcChannel <32)
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	80 32       	cpi	r24, 0x20	; 32
     ec2:	70 f5       	brcc	.+92     	; 0xf20 <MADC_u16GetDigitalvalue+0x74>
	{
		// Clear the channel 5-bits
		ADMUX &= ADC_CHANNEL_MASK;
     ec4:	a7 e2       	ldi	r26, 0x27	; 39
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e7 e2       	ldi	r30, 0x27	; 39
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 7e       	andi	r24, 0xE0	; 224
     ed0:	8c 93       	st	X, r24
		// select channel
		ADMUX |= A_AdcChannel;
     ed2:	a7 e2       	ldi	r26, 0x27	; 39
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e7 e2       	ldi	r30, 0x27	; 39
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	90 81       	ld	r25, Z
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	89 2b       	or	r24, r25
     ee0:	8c 93       	st	X, r24

		// start conversion
		SET_BIT(ADCSRA,6);
     ee2:	a6 e2       	ldi	r26, 0x26	; 38
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e6 e2       	ldi	r30, 0x26	; 38
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	80 64       	ori	r24, 0x40	; 64
     eee:	8c 93       	st	X, r24

		// Polling on ADC Complete flag
		while (GET_BIT(ADCSRA,4)==0);
     ef0:	e6 e2       	ldi	r30, 0x26	; 38
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	82 95       	swap	r24
     ef8:	8f 70       	andi	r24, 0x0F	; 15
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	81 70       	andi	r24, 0x01	; 1
     f00:	90 70       	andi	r25, 0x00	; 0
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	a9 f3       	breq	.-22     	; 0xef0 <MADC_u16GetDigitalvalue+0x44>

		// Clear INT. Flag
		SET_BIT(ADCSRA,4);
     f06:	a6 e2       	ldi	r26, 0x26	; 38
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e6 e2       	ldi	r30, 0x26	; 38
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 61       	ori	r24, 0x10	; 16
     f12:	8c 93       	st	X, r24

		// Read Conversion Value
		local_u16DigitalValue = ADCLH;
     f14:	e4 e2       	ldi	r30, 0x24	; 36
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
	}
	// return result of conversion
	return local_u16DigitalValue;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <MDIO_voidSetPinDirection>:
#include "../Include/MCAL/DIO/DIO_Cfg.h"

#define F_CPU 8000000UL

void MDIO_voidSetPinDirection (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID, DIO_DIRECTION_e A_PINDirection)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	2d 97       	sbiw	r28, 0x0d	; 13
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	6a 83       	std	Y+2, r22	; 0x02
     f48:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7) && (A_PINDirection <= DIO_OUTPUT))
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	84 30       	cpi	r24, 0x04	; 4
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <MDIO_voidSetPinDirection+0x22>
     f50:	09 c1       	rjmp	.+530    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	88 30       	cpi	r24, 0x08	; 8
     f56:	08 f0       	brcs	.+2      	; 0xf5a <MDIO_voidSetPinDirection+0x2a>
     f58:	05 c1       	rjmp	.+522    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	82 30       	cpi	r24, 0x02	; 2
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <MDIO_voidSetPinDirection+0x32>
     f60:	01 c1       	rjmp	.+514    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_DIOPort)
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3d 87       	std	Y+13, r19	; 0x0d
     f6a:	2c 87       	std	Y+12, r18	; 0x0c
     f6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <MDIO_voidSetPinDirection+0x48>
     f76:	4f c0       	rjmp	.+158    	; 0x1016 <MDIO_voidSetPinDirection+0xe6>
     f78:	2c 85       	ldd	r18, Y+12	; 0x0c
     f7a:	3d 85       	ldd	r19, Y+13	; 0x0d
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	2c f4       	brge	.+10     	; 0xf8c <MDIO_voidSetPinDirection+0x5c>
     f82:	8c 85       	ldd	r24, Y+12	; 0x0c
     f84:	9d 85       	ldd	r25, Y+13	; 0x0d
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	71 f0       	breq	.+28     	; 0xfa6 <MDIO_voidSetPinDirection+0x76>
     f8a:	ec c0       	rjmp	.+472    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
     f8c:	2c 85       	ldd	r18, Y+12	; 0x0c
     f8e:	3d 85       	ldd	r19, Y+13	; 0x0d
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <MDIO_voidSetPinDirection+0x68>
     f96:	77 c0       	rjmp	.+238    	; 0x1086 <MDIO_voidSetPinDirection+0x156>
     f98:	8c 85       	ldd	r24, Y+12	; 0x0c
     f9a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <MDIO_voidSetPinDirection+0x74>
     fa2:	a9 c0       	rjmp	.+338    	; 0x10f6 <MDIO_voidSetPinDirection+0x1c6>
     fa4:	df c0       	rjmp	.+446    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch (A_PINDirection)
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	3b 87       	std	Y+11, r19	; 0x0b
     fae:	2a 87       	std	Y+10, r18	; 0x0a
     fb0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb2:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	31 f0       	breq	.+12     	; 0xfc4 <MDIO_voidSetPinDirection+0x94>
     fb8:	2a 85       	ldd	r18, Y+10	; 0x0a
     fba:	3b 85       	ldd	r19, Y+11	; 0x0b
     fbc:	21 30       	cpi	r18, 0x01	; 1
     fbe:	31 05       	cpc	r19, r1
     fc0:	b1 f0       	breq	.+44     	; 0xfee <MDIO_voidSetPinDirection+0xbe>
     fc2:	d0 c0       	rjmp	.+416    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_PINID);
     fc4:	aa e3       	ldi	r26, 0x3A	; 58
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ea e3       	ldi	r30, 0x3A	; 58
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <MDIO_voidSetPinDirection+0xb2>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <MDIO_voidSetPinDirection+0xae>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	bb c0       	rjmp	.+374    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_PINID);
     fee:	aa e3       	ldi	r26, 0x3A	; 58
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ea e3       	ldi	r30, 0x3A	; 58
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <MDIO_voidSetPinDirection+0xdc>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <MDIO_voidSetPinDirection+0xd8>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	a7 c0       	rjmp	.+334    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTB:
			switch (A_PINDirection)
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	39 87       	std	Y+9, r19	; 0x09
    101e:	28 87       	std	Y+8, r18	; 0x08
    1020:	88 85       	ldd	r24, Y+8	; 0x08
    1022:	99 85       	ldd	r25, Y+9	; 0x09
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	31 f0       	breq	.+12     	; 0x1034 <MDIO_voidSetPinDirection+0x104>
    1028:	28 85       	ldd	r18, Y+8	; 0x08
    102a:	39 85       	ldd	r19, Y+9	; 0x09
    102c:	21 30       	cpi	r18, 0x01	; 1
    102e:	31 05       	cpc	r19, r1
    1030:	b1 f0       	breq	.+44     	; 0x105e <MDIO_voidSetPinDirection+0x12e>
    1032:	98 c0       	rjmp	.+304    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_PINID);
    1034:	a7 e3       	ldi	r26, 0x37	; 55
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e7 e3       	ldi	r30, 0x37	; 55
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <MDIO_voidSetPinDirection+0x122>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <MDIO_voidSetPinDirection+0x11e>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	83 c0       	rjmp	.+262    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_PINID);
    105e:	a7 e3       	ldi	r26, 0x37	; 55
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e7 e3       	ldi	r30, 0x37	; 55
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <MDIO_voidSetPinDirection+0x14c>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <MDIO_voidSetPinDirection+0x148>
    1080:	84 2b       	or	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	6f c0       	rjmp	.+222    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTC:
			switch (A_PINDirection)
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3f 83       	std	Y+7, r19	; 0x07
    108e:	2e 83       	std	Y+6, r18	; 0x06
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	9f 81       	ldd	r25, Y+7	; 0x07
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	31 f0       	breq	.+12     	; 0x10a4 <MDIO_voidSetPinDirection+0x174>
    1098:	2e 81       	ldd	r18, Y+6	; 0x06
    109a:	3f 81       	ldd	r19, Y+7	; 0x07
    109c:	21 30       	cpi	r18, 0x01	; 1
    109e:	31 05       	cpc	r19, r1
    10a0:	b1 f0       	breq	.+44     	; 0x10ce <MDIO_voidSetPinDirection+0x19e>
    10a2:	60 c0       	rjmp	.+192    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_PINID);
    10a4:	a4 e3       	ldi	r26, 0x34	; 52
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e4 e3       	ldi	r30, 0x34	; 52
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <MDIO_voidSetPinDirection+0x192>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <MDIO_voidSetPinDirection+0x18e>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	4b c0       	rjmp	.+150    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_PINID);
    10ce:	a4 e3       	ldi	r26, 0x34	; 52
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e4 e3       	ldi	r30, 0x34	; 52
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <MDIO_voidSetPinDirection+0x1bc>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <MDIO_voidSetPinDirection+0x1b8>
    10f0:	84 2b       	or	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	37 c0       	rjmp	.+110    	; 0x1164 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTD:
			switch (A_PINDirection)
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	3d 83       	std	Y+5, r19	; 0x05
    10fe:	2c 83       	std	Y+4, r18	; 0x04
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	31 f0       	breq	.+12     	; 0x1114 <MDIO_voidSetPinDirection+0x1e4>
    1108:	2c 81       	ldd	r18, Y+4	; 0x04
    110a:	3d 81       	ldd	r19, Y+5	; 0x05
    110c:	21 30       	cpi	r18, 0x01	; 1
    110e:	31 05       	cpc	r19, r1
    1110:	b1 f0       	breq	.+44     	; 0x113e <MDIO_voidSetPinDirection+0x20e>
    1112:	28 c0       	rjmp	.+80     	; 0x1164 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_PINID);
    1114:	a1 e3       	ldi	r26, 0x31	; 49
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e1 e3       	ldi	r30, 0x31	; 49
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <MDIO_voidSetPinDirection+0x202>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <MDIO_voidSetPinDirection+0x1fe>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	13 c0       	rjmp	.+38     	; 0x1164 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_PINID);
    113e:	a1 e3       	ldi	r26, 0x31	; 49
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e1 e3       	ldi	r30, 0x31	; 49
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <MDIO_voidSetPinDirection+0x22c>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <MDIO_voidSetPinDirection+0x228>
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1164:	2d 96       	adiw	r28, 0x0d	; 13
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID, DIO_VALUE_e A_PINValue)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	2d 97       	sbiw	r28, 0x0d	; 13
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	6a 83       	std	Y+2, r22	; 0x02
    118e:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7) && (A_PINValue <= DIO_SET))
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	08 f0       	brcs	.+2      	; 0x1198 <MDIO_voidSetPinValue+0x22>
    1196:	09 c1       	rjmp	.+530    	; 0x13aa <MDIO_voidSetPinValue+0x234>
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	88 30       	cpi	r24, 0x08	; 8
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <MDIO_voidSetPinValue+0x2a>
    119e:	05 c1       	rjmp	.+522    	; 0x13aa <MDIO_voidSetPinValue+0x234>
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <MDIO_voidSetPinValue+0x32>
    11a6:	01 c1       	rjmp	.+514    	; 0x13aa <MDIO_voidSetPinValue+0x234>
	{
		switch (A_DIOPort)
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3d 87       	std	Y+13, r19	; 0x0d
    11b0:	2c 87       	std	Y+12, r18	; 0x0c
    11b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    11b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	09 f4       	brne	.+2      	; 0x11be <MDIO_voidSetPinValue+0x48>
    11bc:	4f c0       	rjmp	.+158    	; 0x125c <MDIO_voidSetPinValue+0xe6>
    11be:	2c 85       	ldd	r18, Y+12	; 0x0c
    11c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	2c f4       	brge	.+10     	; 0x11d2 <MDIO_voidSetPinValue+0x5c>
    11c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	71 f0       	breq	.+28     	; 0x11ec <MDIO_voidSetPinValue+0x76>
    11d0:	ec c0       	rjmp	.+472    	; 0x13aa <MDIO_voidSetPinValue+0x234>
    11d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11d4:	3d 85       	ldd	r19, Y+13	; 0x0d
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	31 05       	cpc	r19, r1
    11da:	09 f4       	brne	.+2      	; 0x11de <MDIO_voidSetPinValue+0x68>
    11dc:	77 c0       	rjmp	.+238    	; 0x12cc <MDIO_voidSetPinValue+0x156>
    11de:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	91 05       	cpc	r25, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <MDIO_voidSetPinValue+0x74>
    11e8:	a9 c0       	rjmp	.+338    	; 0x133c <MDIO_voidSetPinValue+0x1c6>
    11ea:	df c0       	rjmp	.+446    	; 0x13aa <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch (A_PINValue)
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3b 87       	std	Y+11, r19	; 0x0b
    11f4:	2a 87       	std	Y+10, r18	; 0x0a
    11f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    11f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	31 f0       	breq	.+12     	; 0x120a <MDIO_voidSetPinValue+0x94>
    11fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1200:	3b 85       	ldd	r19, Y+11	; 0x0b
    1202:	21 30       	cpi	r18, 0x01	; 1
    1204:	31 05       	cpc	r19, r1
    1206:	b1 f0       	breq	.+44     	; 0x1234 <MDIO_voidSetPinValue+0xbe>
    1208:	d0 c0       	rjmp	.+416    	; 0x13aa <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_PINID);
    120a:	ab e3       	ldi	r26, 0x3B	; 59
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <MDIO_voidSetPinValue+0xb2>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <MDIO_voidSetPinValue+0xae>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	bb c0       	rjmp	.+374    	; 0x13aa <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_PINID);
    1234:	ab e3       	ldi	r26, 0x3B	; 59
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	eb e3       	ldi	r30, 0x3B	; 59
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <MDIO_voidSetPinValue+0xdc>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <MDIO_voidSetPinValue+0xd8>
    1256:	84 2b       	or	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	a7 c0       	rjmp	.+334    	; 0x13aa <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTB:
			switch (A_PINValue)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	39 87       	std	Y+9, r19	; 0x09
    1264:	28 87       	std	Y+8, r18	; 0x08
    1266:	88 85       	ldd	r24, Y+8	; 0x08
    1268:	99 85       	ldd	r25, Y+9	; 0x09
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	31 f0       	breq	.+12     	; 0x127a <MDIO_voidSetPinValue+0x104>
    126e:	28 85       	ldd	r18, Y+8	; 0x08
    1270:	39 85       	ldd	r19, Y+9	; 0x09
    1272:	21 30       	cpi	r18, 0x01	; 1
    1274:	31 05       	cpc	r19, r1
    1276:	b1 f0       	breq	.+44     	; 0x12a4 <MDIO_voidSetPinValue+0x12e>
    1278:	98 c0       	rjmp	.+304    	; 0x13aa <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTB_REG,A_PINID);
    127a:	a8 e3       	ldi	r26, 0x38	; 56
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e8 e3       	ldi	r30, 0x38	; 56
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <MDIO_voidSetPinValue+0x122>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <MDIO_voidSetPinValue+0x11e>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	83 c0       	rjmp	.+262    	; 0x13aa <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTB_REG,A_PINID);
    12a4:	a8 e3       	ldi	r26, 0x38	; 56
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e8 e3       	ldi	r30, 0x38	; 56
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <MDIO_voidSetPinValue+0x14c>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <MDIO_voidSetPinValue+0x148>
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	6f c0       	rjmp	.+222    	; 0x13aa <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTC:
			switch (A_PINValue)
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3f 83       	std	Y+7, r19	; 0x07
    12d4:	2e 83       	std	Y+6, r18	; 0x06
    12d6:	8e 81       	ldd	r24, Y+6	; 0x06
    12d8:	9f 81       	ldd	r25, Y+7	; 0x07
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	31 f0       	breq	.+12     	; 0x12ea <MDIO_voidSetPinValue+0x174>
    12de:	2e 81       	ldd	r18, Y+6	; 0x06
    12e0:	3f 81       	ldd	r19, Y+7	; 0x07
    12e2:	21 30       	cpi	r18, 0x01	; 1
    12e4:	31 05       	cpc	r19, r1
    12e6:	b1 f0       	breq	.+44     	; 0x1314 <MDIO_voidSetPinValue+0x19e>
    12e8:	60 c0       	rjmp	.+192    	; 0x13aa <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTC_REG,A_PINID);
    12ea:	a5 e3       	ldi	r26, 0x35	; 53
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e5 e3       	ldi	r30, 0x35	; 53
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <MDIO_voidSetPinValue+0x192>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <MDIO_voidSetPinValue+0x18e>
    130c:	80 95       	com	r24
    130e:	84 23       	and	r24, r20
    1310:	8c 93       	st	X, r24
    1312:	4b c0       	rjmp	.+150    	; 0x13aa <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTC_REG,A_PINID);
    1314:	a5 e3       	ldi	r26, 0x35	; 53
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e5 e3       	ldi	r30, 0x35	; 53
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <MDIO_voidSetPinValue+0x1bc>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <MDIO_voidSetPinValue+0x1b8>
    1336:	84 2b       	or	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	37 c0       	rjmp	.+110    	; 0x13aa <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTD:
			switch (A_PINValue)
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3d 83       	std	Y+5, r19	; 0x05
    1344:	2c 83       	std	Y+4, r18	; 0x04
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	31 f0       	breq	.+12     	; 0x135a <MDIO_voidSetPinValue+0x1e4>
    134e:	2c 81       	ldd	r18, Y+4	; 0x04
    1350:	3d 81       	ldd	r19, Y+5	; 0x05
    1352:	21 30       	cpi	r18, 0x01	; 1
    1354:	31 05       	cpc	r19, r1
    1356:	b1 f0       	breq	.+44     	; 0x1384 <MDIO_voidSetPinValue+0x20e>
    1358:	28 c0       	rjmp	.+80     	; 0x13aa <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTD_REG,A_PINID);
    135a:	a2 e3       	ldi	r26, 0x32	; 50
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e2 e3       	ldi	r30, 0x32	; 50
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <MDIO_voidSetPinValue+0x202>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <MDIO_voidSetPinValue+0x1fe>
    137c:	80 95       	com	r24
    137e:	84 23       	and	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	13 c0       	rjmp	.+38     	; 0x13aa <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTD_REG,A_PINID);
    1384:	a2 e3       	ldi	r26, 0x32	; 50
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e2 e3       	ldi	r30, 0x32	; 50
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <MDIO_voidSetPinValue+0x22c>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <MDIO_voidSetPinValue+0x228>
    13a6:	84 2b       	or	r24, r20
    13a8:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    13aa:	2d 96       	adiw	r28, 0x0d	; 13
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <MDIO_GetPinValue>:


DIO_VALUE_e MDIO_GetPinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <MDIO_GetPinValue+0x6>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <MDIO_GetPinValue+0x8>
    13c4:	0f 92       	push	r0
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	8a 83       	std	Y+2, r24	; 0x02
    13cc:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PINValue;
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7))
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	84 30       	cpi	r24, 0x04	; 4
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <MDIO_GetPinValue+0x1a>
    13d4:	6b c0       	rjmp	.+214    	; 0x14ac <MDIO_GetPinValue+0xf0>
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 30       	cpi	r24, 0x08	; 8
    13da:	08 f0       	brcs	.+2      	; 0x13de <MDIO_GetPinValue+0x22>
    13dc:	67 c0       	rjmp	.+206    	; 0x14ac <MDIO_GetPinValue+0xf0>
	{
		switch (A_DIOPort)
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	3d 83       	std	Y+5, r19	; 0x05
    13e6:	2c 83       	std	Y+4, r18	; 0x04
    13e8:	4c 81       	ldd	r20, Y+4	; 0x04
    13ea:	5d 81       	ldd	r21, Y+5	; 0x05
    13ec:	41 30       	cpi	r20, 0x01	; 1
    13ee:	51 05       	cpc	r21, r1
    13f0:	41 f1       	breq	.+80     	; 0x1442 <MDIO_GetPinValue+0x86>
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	91 05       	cpc	r25, r1
    13fa:	34 f4       	brge	.+12     	; 0x1408 <MDIO_GetPinValue+0x4c>
    13fc:	2c 81       	ldd	r18, Y+4	; 0x04
    13fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1400:	21 15       	cp	r18, r1
    1402:	31 05       	cpc	r19, r1
    1404:	61 f0       	breq	.+24     	; 0x141e <MDIO_GetPinValue+0x62>
    1406:	52 c0       	rjmp	.+164    	; 0x14ac <MDIO_GetPinValue+0xf0>
    1408:	4c 81       	ldd	r20, Y+4	; 0x04
    140a:	5d 81       	ldd	r21, Y+5	; 0x05
    140c:	42 30       	cpi	r20, 0x02	; 2
    140e:	51 05       	cpc	r21, r1
    1410:	51 f1       	breq	.+84     	; 0x1466 <MDIO_GetPinValue+0xaa>
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	9d 81       	ldd	r25, Y+5	; 0x05
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	91 05       	cpc	r25, r1
    141a:	b9 f1       	breq	.+110    	; 0x148a <MDIO_GetPinValue+0xce>
    141c:	47 c0       	rjmp	.+142    	; 0x14ac <MDIO_GetPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PINValue = GET_BIT(PINA_REG,A_PINID);
    141e:	e9 e3       	ldi	r30, 0x39	; 57
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a9 01       	movw	r20, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <MDIO_GetPinValue+0x7a>
    1432:	55 95       	asr	r21
    1434:	47 95       	ror	r20
    1436:	8a 95       	dec	r24
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <MDIO_GetPinValue+0x76>
    143a:	ca 01       	movw	r24, r20
    143c:	81 70       	andi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	35 c0       	rjmp	.+106    	; 0x14ac <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PINValue = GET_BIT(PINB_REG,A_PINID);
    1442:	e6 e3       	ldi	r30, 0x36	; 54
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a9 01       	movw	r20, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <MDIO_GetPinValue+0x9e>
    1456:	55 95       	asr	r21
    1458:	47 95       	ror	r20
    145a:	8a 95       	dec	r24
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <MDIO_GetPinValue+0x9a>
    145e:	ca 01       	movw	r24, r20
    1460:	81 70       	andi	r24, 0x01	; 1
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	23 c0       	rjmp	.+70     	; 0x14ac <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PINValue = GET_BIT(PINC_REG,A_PINID);
    1466:	e3 e3       	ldi	r30, 0x33	; 51
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <MDIO_GetPinValue+0xc2>
    147a:	55 95       	asr	r21
    147c:	47 95       	ror	r20
    147e:	8a 95       	dec	r24
    1480:	e2 f7       	brpl	.-8      	; 0x147a <MDIO_GetPinValue+0xbe>
    1482:	ca 01       	movw	r24, r20
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	11 c0       	rjmp	.+34     	; 0x14ac <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PINValue = GET_BIT(PIND_REG,A_PINID);
    148a:	e0 e3       	ldi	r30, 0x30	; 48
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a9 01       	movw	r20, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <MDIO_GetPinValue+0xe6>
    149e:	55 95       	asr	r21
    14a0:	47 95       	ror	r20
    14a2:	8a 95       	dec	r24
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <MDIO_GetPinValue+0xe2>
    14a6:	ca 01       	movw	r24, r20
    14a8:	81 70       	andi	r24, 0x01	; 1
    14aa:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
		}
	}
	return local_PINValue;
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <MDIO_voidTogglePinValue+0x6>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <MDIO_voidTogglePinValue+0x8>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7))
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	84 30       	cpi	r24, 0x04	; 4
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <MDIO_voidTogglePinValue+0x18>
    14d4:	72 c0       	rjmp	.+228    	; 0x15ba <MDIO_voidTogglePinValue+0xfc>
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	88 30       	cpi	r24, 0x08	; 8
    14da:	08 f0       	brcs	.+2      	; 0x14de <MDIO_voidTogglePinValue+0x20>
    14dc:	6e c0       	rjmp	.+220    	; 0x15ba <MDIO_voidTogglePinValue+0xfc>
	{
		switch (A_DIOPort)
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	3c 83       	std	Y+4, r19	; 0x04
    14e6:	2b 83       	std	Y+3, r18	; 0x03
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	91 05       	cpc	r25, r1
    14f0:	49 f1       	breq	.+82     	; 0x1544 <MDIO_voidTogglePinValue+0x86>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	2c f4       	brge	.+10     	; 0x1506 <MDIO_voidTogglePinValue+0x48>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	61 f0       	breq	.+24     	; 0x151c <MDIO_voidTogglePinValue+0x5e>
    1504:	5a c0       	rjmp	.+180    	; 0x15ba <MDIO_voidTogglePinValue+0xfc>
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	71 f1       	breq	.+92     	; 0x156c <MDIO_voidTogglePinValue+0xae>
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	91 05       	cpc	r25, r1
    1518:	e9 f1       	breq	.+122    	; 0x1594 <MDIO_voidTogglePinValue+0xd6>
    151a:	4f c0       	rjmp	.+158    	; 0x15ba <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_PINID);
    151c:	ab e3       	ldi	r26, 0x3B	; 59
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	eb e3       	ldi	r30, 0x3B	; 59
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <MDIO_voidTogglePinValue+0x7c>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <MDIO_voidTogglePinValue+0x78>
    153e:	84 27       	eor	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	3b c0       	rjmp	.+118    	; 0x15ba <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_PINID);
    1544:	a8 e3       	ldi	r26, 0x38	; 56
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e8 e3       	ldi	r30, 0x38	; 56
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <MDIO_voidTogglePinValue+0xa4>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <MDIO_voidTogglePinValue+0xa0>
    1566:	84 27       	eor	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	27 c0       	rjmp	.+78     	; 0x15ba <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_PINID);
    156c:	a5 e3       	ldi	r26, 0x35	; 53
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e5 e3       	ldi	r30, 0x35	; 53
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <MDIO_voidTogglePinValue+0xcc>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <MDIO_voidTogglePinValue+0xc8>
    158e:	84 27       	eor	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	13 c0       	rjmp	.+38     	; 0x15ba <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_PINID);
    1594:	a2 e3       	ldi	r26, 0x32	; 50
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e2 e3       	ldi	r30, 0x32	; 50
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 2e       	mov	r0, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <MDIO_voidTogglePinValue+0xf4>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <MDIO_voidTogglePinValue+0xf0>
    15b6:	84 27       	eor	r24, r20
    15b8:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection (DIO_PORT_e A_DIOPort, u8 A_u8Direction)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <MDIO_voidSetPortDirection+0x6>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <MDIO_voidSetPortDirection+0x8>
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD))
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	84 30       	cpi	r24, 0x04	; 4
    15dc:	90 f5       	brcc	.+100    	; 0x1642 <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_DIOPort)
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	3c 83       	std	Y+4, r19	; 0x04
    15e6:	2b 83       	std	Y+3, r18	; 0x03
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	91 05       	cpc	r25, r1
    15f0:	d1 f0       	breq	.+52     	; 0x1626 <MDIO_voidSetPortDirection+0x5e>
    15f2:	2b 81       	ldd	r18, Y+3	; 0x03
    15f4:	3c 81       	ldd	r19, Y+4	; 0x04
    15f6:	22 30       	cpi	r18, 0x02	; 2
    15f8:	31 05       	cpc	r19, r1
    15fa:	2c f4       	brge	.+10     	; 0x1606 <MDIO_voidSetPortDirection+0x3e>
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	61 f0       	breq	.+24     	; 0x161c <MDIO_voidSetPortDirection+0x54>
    1604:	1e c0       	rjmp	.+60     	; 0x1642 <MDIO_voidSetPortDirection+0x7a>
    1606:	2b 81       	ldd	r18, Y+3	; 0x03
    1608:	3c 81       	ldd	r19, Y+4	; 0x04
    160a:	22 30       	cpi	r18, 0x02	; 2
    160c:	31 05       	cpc	r19, r1
    160e:	81 f0       	breq	.+32     	; 0x1630 <MDIO_voidSetPortDirection+0x68>
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	83 30       	cpi	r24, 0x03	; 3
    1616:	91 05       	cpc	r25, r1
    1618:	81 f0       	breq	.+32     	; 0x163a <MDIO_voidSetPortDirection+0x72>
    161a:	13 c0       	rjmp	.+38     	; 0x1642 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8Direction;
    161c:	ea e3       	ldi	r30, 0x3A	; 58
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	80 83       	st	Z, r24
    1624:	0e c0       	rjmp	.+28     	; 0x1642 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8Direction;
    1626:	e7 e3       	ldi	r30, 0x37	; 55
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	80 83       	st	Z, r24
    162e:	09 c0       	rjmp	.+18     	; 0x1642 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8Direction;
    1630:	e4 e3       	ldi	r30, 0x34	; 52
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	80 83       	st	Z, r24
    1638:	04 c0       	rjmp	.+8      	; 0x1642 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8Direction;
    163a:	e1 e3       	ldi	r30, 0x31	; 49
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
	}
}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (DIO_PORT_e A_DIOPort, u8 A_u8Value)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <MDIO_voidSetPortValue+0x6>
    1656:	00 d0       	rcall	.+0      	; 0x1658 <MDIO_voidSetPortValue+0x8>
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD))
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	84 30       	cpi	r24, 0x04	; 4
    1664:	90 f5       	brcc	.+100    	; 0x16ca <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_DIOPort)
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3c 83       	std	Y+4, r19	; 0x04
    166e:	2b 83       	std	Y+3, r18	; 0x03
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	91 05       	cpc	r25, r1
    1678:	d1 f0       	breq	.+52     	; 0x16ae <MDIO_voidSetPortValue+0x5e>
    167a:	2b 81       	ldd	r18, Y+3	; 0x03
    167c:	3c 81       	ldd	r19, Y+4	; 0x04
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	2c f4       	brge	.+10     	; 0x168e <MDIO_voidSetPortValue+0x3e>
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	61 f0       	breq	.+24     	; 0x16a4 <MDIO_voidSetPortValue+0x54>
    168c:	1e c0       	rjmp	.+60     	; 0x16ca <MDIO_voidSetPortValue+0x7a>
    168e:	2b 81       	ldd	r18, Y+3	; 0x03
    1690:	3c 81       	ldd	r19, Y+4	; 0x04
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	81 f0       	breq	.+32     	; 0x16b8 <MDIO_voidSetPortValue+0x68>
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	83 30       	cpi	r24, 0x03	; 3
    169e:	91 05       	cpc	r25, r1
    16a0:	81 f0       	breq	.+32     	; 0x16c2 <MDIO_voidSetPortValue+0x72>
    16a2:	13 c0       	rjmp	.+38     	; 0x16ca <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8Value;
    16a4:	eb e3       	ldi	r30, 0x3B	; 59
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	80 83       	st	Z, r24
    16ac:	0e c0       	rjmp	.+28     	; 0x16ca <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8Value;
    16ae:	e8 e3       	ldi	r30, 0x38	; 56
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	80 83       	st	Z, r24
    16b6:	09 c0       	rjmp	.+18     	; 0x16ca <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8Value;
    16b8:	e5 e3       	ldi	r30, 0x35	; 53
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	80 83       	st	Z, r24
    16c0:	04 c0       	rjmp	.+8      	; 0x16ca <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8Value;
    16c2:	e2 e3       	ldi	r30, 0x32	; 50
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
	}
}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <MDIO_voidInit>:


void MDIO_voidInit()
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG=CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION
    16e0:	ea e3       	ldi	r30, 0x3A	; 58
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 83       	st	Z, r24
					 ,PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG=CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION
    16e8:	e7 e3       	ldi	r30, 0x37	; 55
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	10 82       	st	Z, r1
					 ,PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG=CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION
    16ee:	e4 e3       	ldi	r30, 0x34	; 52
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	10 82       	st	Z, r1
					 ,PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG=CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,PD5_INITIAL_DIRECTION,PD4_INITIAL_DIRECTION
    16f4:	e1 e3       	ldi	r30, 0x31	; 49
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	10 82       	st	Z, r1
					 ,PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);


	PORTA_REG=CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,PA5_INITIAL_VALUE,PA4_INITIAL_VALUE
    16fa:	eb e3       	ldi	r30, 0x3B	; 59
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	10 82       	st	Z, r1
					 ,PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG=CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,PB5_INITIAL_VALUE,PB4_INITIAL_VALUE
    1700:	e8 e3       	ldi	r30, 0x38	; 56
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	10 82       	st	Z, r1
					 ,PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG=CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,PC5_INITIAL_VALUE,PC4_INITIAL_VALUE
    1706:	e5 e3       	ldi	r30, 0x35	; 53
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	10 82       	st	Z, r1
					 ,PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG=CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,PD5_INITIAL_VALUE,PD4_INITIAL_VALUE
    170c:	e2 e3       	ldi	r30, 0x32	; 50
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	80 83       	st	Z, r24
					 ,PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <MEXTI_voidConfig>:
void (*EXTI0_Callback) (void) = NULL;
void (*EXTI1_Callback) (void) = NULL;
void (*EXTI2_Callback) (void) = NULL;

void MEXTI_voidConfig(EXTI_ID A_EXTI_ID , EXTI_SENSE_MODE A_EXTISenseMode)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <MEXTI_voidConfig+0x6>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <MEXTI_voidConfig+0x8>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <MEXTI_voidConfig+0xa>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	6a 83       	std	Y+2, r22	; 0x02
	//Input valid.
	if(	(A_EXTI_ID <=EXTI2) && (A_EXTISenseMode <=RISING_EDGE) )
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	83 30       	cpi	r24, 0x03	; 3
    1730:	08 f0       	brcs	.+2      	; 0x1734 <MEXTI_voidConfig+0x1a>
    1732:	5e c0       	rjmp	.+188    	; 0x17f0 <MEXTI_voidConfig+0xd6>
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	84 30       	cpi	r24, 0x04	; 4
    1738:	08 f0       	brcs	.+2      	; 0x173c <MEXTI_voidConfig+0x22>
    173a:	5a c0       	rjmp	.+180    	; 0x17f0 <MEXTI_voidConfig+0xd6>
	{
		switch (A_EXTI_ID)
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3e 83       	std	Y+6, r19	; 0x06
    1744:	2d 83       	std	Y+5, r18	; 0x05
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	d1 f0       	breq	.+52     	; 0x1784 <MEXTI_voidConfig+0x6a>
    1750:	2d 81       	ldd	r18, Y+5	; 0x05
    1752:	3e 81       	ldd	r19, Y+6	; 0x06
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	61 f1       	breq	.+88     	; 0x17b2 <MEXTI_voidConfig+0x98>
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	09 f0       	breq	.+2      	; 0x1764 <MEXTI_voidConfig+0x4a>
    1762:	46 c0       	rjmp	.+140    	; 0x17f0 <MEXTI_voidConfig+0xd6>
		{
		case EXTI0:
					MCUCR &= ~(SENSE_MODE_MASK << EXTI0_SENSE_MODE_BITS);
    1764:	a5 e5       	ldi	r26, 0x55	; 85
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e5 e5       	ldi	r30, 0x55	; 85
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	8c 7f       	andi	r24, 0xFC	; 252
    1770:	8c 93       	st	X, r24
					MCUCR |= (A_EXTISenseMode << EXTI0_SENSE_MODE_BITS);
    1772:	a5 e5       	ldi	r26, 0x55	; 85
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e5 e5       	ldi	r30, 0x55	; 85
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	90 81       	ld	r25, Z
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	89 2b       	or	r24, r25
    1780:	8c 93       	st	X, r24
    1782:	36 c0       	rjmp	.+108    	; 0x17f0 <MEXTI_voidConfig+0xd6>
					break;
		case EXTI1:
					MCUCR &= ~(SENSE_MODE_MASK << EXTI1_SENSE_MODE_BITS);
    1784:	a5 e5       	ldi	r26, 0x55	; 85
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e5       	ldi	r30, 0x55	; 85
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	83 7f       	andi	r24, 0xF3	; 243
    1790:	8c 93       	st	X, r24
					MCUCR |= (A_EXTISenseMode << EXTI1_SENSE_MODE_BITS);
    1792:	a5 e5       	ldi	r26, 0x55	; 85
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e5 e5       	ldi	r30, 0x55	; 85
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	28 2f       	mov	r18, r24
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	82 2b       	or	r24, r18
    17ae:	8c 93       	st	X, r24
    17b0:	1f c0       	rjmp	.+62     	; 0x17f0 <MEXTI_voidConfig+0xd6>
					break;
		case EXTI2:
					switch(A_EXTISenseMode)
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3c 83       	std	Y+4, r19	; 0x04
    17ba:	2b 83       	std	Y+3, r18	; 0x03
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	82 30       	cpi	r24, 0x02	; 2
    17c2:	91 05       	cpc	r25, r1
    17c4:	31 f0       	breq	.+12     	; 0x17d2 <MEXTI_voidConfig+0xb8>
    17c6:	2b 81       	ldd	r18, Y+3	; 0x03
    17c8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ca:	23 30       	cpi	r18, 0x03	; 3
    17cc:	31 05       	cpc	r19, r1
    17ce:	49 f0       	breq	.+18     	; 0x17e2 <MEXTI_voidConfig+0xc8>
    17d0:	0f c0       	rjmp	.+30     	; 0x17f0 <MEXTI_voidConfig+0xd6>
					{
					case FALLING_EDGE:
									 	 CLR_BIT(MCUCSR , EXTI2_SENSE_MODE_BITS);
    17d2:	a4 e5       	ldi	r26, 0x54	; 84
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e4 e5       	ldi	r30, 0x54	; 84
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8f 7b       	andi	r24, 0xBF	; 191
    17de:	8c 93       	st	X, r24
    17e0:	07 c0       	rjmp	.+14     	; 0x17f0 <MEXTI_voidConfig+0xd6>
									 	 break;
					case RISING_EDGE:
										SET_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS);
    17e2:	a4 e5       	ldi	r26, 0x54	; 84
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e4 e5       	ldi	r30, 0x54	; 84
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 64       	ori	r24, 0x40	; 64
    17ee:	8c 93       	st	X, r24
					break;

		}

	}
}
    17f0:	26 96       	adiw	r28, 0x06	; 6
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <MEXTI_voidEnable>:

void MEXTI_voidEnable (EXTI_ID A_EXTI_ID)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <MEXTI_voidEnable+0x6>
    1808:	0f 92       	push	r0
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	89 83       	std	Y+1, r24	; 0x01
	//Input Validation
	if (A_EXTI_ID <=EXTI2)
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	50 f5       	brcc	.+84     	; 0x186a <MEXTI_voidEnable+0x68>
	{
		switch (A_EXTI_ID)
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3b 83       	std	Y+3, r19	; 0x03
    181e:	2a 83       	std	Y+2, r18	; 0x02
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	9b 81       	ldd	r25, Y+3	; 0x03
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	91 05       	cpc	r25, r1
    1828:	89 f0       	breq	.+34     	; 0x184c <MEXTI_voidEnable+0x4a>
    182a:	2a 81       	ldd	r18, Y+2	; 0x02
    182c:	3b 81       	ldd	r19, Y+3	; 0x03
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	a1 f0       	breq	.+40     	; 0x185c <MEXTI_voidEnable+0x5a>
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	9b 81       	ldd	r25, Y+3	; 0x03
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	b9 f4       	brne	.+46     	; 0x186a <MEXTI_voidEnable+0x68>
		{
		case EXTI0:
					SET_BIT(GICR,EXTI0_ENABLE_BIT);
    183c:	ab e5       	ldi	r26, 0x5B	; 91
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	eb e5       	ldi	r30, 0x5B	; 91
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	80 64       	ori	r24, 0x40	; 64
    1848:	8c 93       	st	X, r24
    184a:	0f c0       	rjmp	.+30     	; 0x186a <MEXTI_voidEnable+0x68>
					break;
		case EXTI1:
					SET_BIT(GICR,EXTI1_ENABLE_BIT);
    184c:	ab e5       	ldi	r26, 0x5B	; 91
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	eb e5       	ldi	r30, 0x5B	; 91
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	80 68       	ori	r24, 0x80	; 128
    1858:	8c 93       	st	X, r24
    185a:	07 c0       	rjmp	.+14     	; 0x186a <MEXTI_voidEnable+0x68>
					break;
		case EXTI2:
					SET_BIT(GICR,EXTI2_ENABLE_BIT);
    185c:	ab e5       	ldi	r26, 0x5B	; 91
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	eb e5       	ldi	r30, 0x5B	; 91
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	80 62       	ori	r24, 0x20	; 32
    1868:	8c 93       	st	X, r24
					break;
		default: break;
		}
	}
}
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <MEXTI_voidDisable>:

void MEXTI_voidDisable (EXTI_ID A_EXTI_ID)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <MEXTI_voidDisable+0x6>
    187c:	0f 92       	push	r0
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	89 83       	std	Y+1, r24	; 0x01
	//Input Validation
	if (A_EXTI_ID <=EXTI2)
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	50 f5       	brcc	.+84     	; 0x18de <MEXTI_voidDisable+0x68>
	{
		switch (A_EXTI_ID)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3b 83       	std	Y+3, r19	; 0x03
    1892:	2a 83       	std	Y+2, r18	; 0x02
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	9b 81       	ldd	r25, Y+3	; 0x03
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	91 05       	cpc	r25, r1
    189c:	89 f0       	breq	.+34     	; 0x18c0 <MEXTI_voidDisable+0x4a>
    189e:	2a 81       	ldd	r18, Y+2	; 0x02
    18a0:	3b 81       	ldd	r19, Y+3	; 0x03
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	a1 f0       	breq	.+40     	; 0x18d0 <MEXTI_voidDisable+0x5a>
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	b9 f4       	brne	.+46     	; 0x18de <MEXTI_voidDisable+0x68>
		{
		case EXTI0:
					CLR_BIT(GICR,EXTI0_ENABLE_BIT);
    18b0:	ab e5       	ldi	r26, 0x5B	; 91
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	eb e5       	ldi	r30, 0x5B	; 91
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8f 7b       	andi	r24, 0xBF	; 191
    18bc:	8c 93       	st	X, r24
    18be:	0f c0       	rjmp	.+30     	; 0x18de <MEXTI_voidDisable+0x68>
					break;
		case EXTI1:
					CLR_BIT(GICR,EXTI1_ENABLE_BIT);
    18c0:	ab e5       	ldi	r26, 0x5B	; 91
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e5       	ldi	r30, 0x5B	; 91
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8f 77       	andi	r24, 0x7F	; 127
    18cc:	8c 93       	st	X, r24
    18ce:	07 c0       	rjmp	.+14     	; 0x18de <MEXTI_voidDisable+0x68>
					break;
		case EXTI2:
					CLR_BIT(GICR,EXTI2_ENABLE_BIT);
    18d0:	ab e5       	ldi	r26, 0x5B	; 91
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	eb e5       	ldi	r30, 0x5B	; 91
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	8f 7d       	andi	r24, 0xDF	; 223
    18dc:	8c 93       	st	X, r24
					break;
		default: break;
		}
	}
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <MEXTI_voidCallback>:

void MEXTI_voidCallback(EXTI_ID A_EXTI_ID , void(*A_ptrToFunc)(void))
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <MEXTI_voidCallback+0x6>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <MEXTI_voidCallback+0x8>
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	7b 83       	std	Y+3, r23	; 0x03
    18fc:	6a 83       	std	Y+2, r22	; 0x02
	//Input Valid
	if((A_EXTI_ID <=EXTI2) && (A_ptrToFunc != NULL))
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	83 30       	cpi	r24, 0x03	; 3
    1902:	58 f5       	brcc	.+86     	; 0x195a <MEXTI_voidCallback+0x70>
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	9b 81       	ldd	r25, Y+3	; 0x03
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	39 f1       	breq	.+78     	; 0x195a <MEXTI_voidCallback+0x70>
	{
		switch (A_EXTI_ID)
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	3d 83       	std	Y+5, r19	; 0x05
    1914:	2c 83       	std	Y+4, r18	; 0x04
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	9d 81       	ldd	r25, Y+5	; 0x05
    191a:	81 30       	cpi	r24, 0x01	; 1
    191c:	91 05       	cpc	r25, r1
    191e:	81 f0       	breq	.+32     	; 0x1940 <MEXTI_voidCallback+0x56>
    1920:	2c 81       	ldd	r18, Y+4	; 0x04
    1922:	3d 81       	ldd	r19, Y+5	; 0x05
    1924:	22 30       	cpi	r18, 0x02	; 2
    1926:	31 05       	cpc	r19, r1
    1928:	91 f0       	breq	.+36     	; 0x194e <MEXTI_voidCallback+0x64>
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	9d 81       	ldd	r25, Y+5	; 0x05
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	a1 f4       	brne	.+40     	; 0x195a <MEXTI_voidCallback+0x70>
		{
		case EXTI0:
					EXTI0_Callback=A_ptrToFunc;
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	9b 81       	ldd	r25, Y+3	; 0x03
    1936:	90 93 81 01 	sts	0x0181, r25
    193a:	80 93 80 01 	sts	0x0180, r24
    193e:	0d c0       	rjmp	.+26     	; 0x195a <MEXTI_voidCallback+0x70>
					break;
		case EXTI1:
					EXTI1_Callback=A_ptrToFunc;
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	9b 81       	ldd	r25, Y+3	; 0x03
    1944:	90 93 83 01 	sts	0x0183, r25
    1948:	80 93 82 01 	sts	0x0182, r24
    194c:	06 c0       	rjmp	.+12     	; 0x195a <MEXTI_voidCallback+0x70>
					break;
		case EXTI2:
					EXTI2_Callback=A_ptrToFunc;
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	9b 81       	ldd	r25, Y+3	; 0x03
    1952:	90 93 85 01 	sts	0x0185, r25
    1956:	80 93 84 01 	sts	0x0184, r24
					break;
		}
	}
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <__vector_1>:


void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    196a:	1f 92       	push	r1
    196c:	0f 92       	push	r0
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	0f 92       	push	r0
    1972:	11 24       	eor	r1, r1
    1974:	2f 93       	push	r18
    1976:	3f 93       	push	r19
    1978:	4f 93       	push	r20
    197a:	5f 93       	push	r21
    197c:	6f 93       	push	r22
    197e:	7f 93       	push	r23
    1980:	8f 93       	push	r24
    1982:	9f 93       	push	r25
    1984:	af 93       	push	r26
    1986:	bf 93       	push	r27
    1988:	ef 93       	push	r30
    198a:	ff 93       	push	r31
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Callback != NULL)
    1994:	80 91 80 01 	lds	r24, 0x0180
    1998:	90 91 81 01 	lds	r25, 0x0181
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	29 f0       	breq	.+10     	; 0x19aa <__vector_1+0x40>
	{
		EXTI0_Callback();
    19a0:	e0 91 80 01 	lds	r30, 0x0180
    19a4:	f0 91 81 01 	lds	r31, 0x0181
    19a8:	09 95       	icall
	}
}
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	ff 91       	pop	r31
    19b0:	ef 91       	pop	r30
    19b2:	bf 91       	pop	r27
    19b4:	af 91       	pop	r26
    19b6:	9f 91       	pop	r25
    19b8:	8f 91       	pop	r24
    19ba:	7f 91       	pop	r23
    19bc:	6f 91       	pop	r22
    19be:	5f 91       	pop	r21
    19c0:	4f 91       	pop	r20
    19c2:	3f 91       	pop	r19
    19c4:	2f 91       	pop	r18
    19c6:	0f 90       	pop	r0
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	0f 90       	pop	r0
    19cc:	1f 90       	pop	r1
    19ce:	18 95       	reti

000019d0 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    19d0:	1f 92       	push	r1
    19d2:	0f 92       	push	r0
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	0f 92       	push	r0
    19d8:	11 24       	eor	r1, r1
    19da:	2f 93       	push	r18
    19dc:	3f 93       	push	r19
    19de:	4f 93       	push	r20
    19e0:	5f 93       	push	r21
    19e2:	6f 93       	push	r22
    19e4:	7f 93       	push	r23
    19e6:	8f 93       	push	r24
    19e8:	9f 93       	push	r25
    19ea:	af 93       	push	r26
    19ec:	bf 93       	push	r27
    19ee:	ef 93       	push	r30
    19f0:	ff 93       	push	r31
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_Callback != NULL)
    19fa:	80 91 82 01 	lds	r24, 0x0182
    19fe:	90 91 83 01 	lds	r25, 0x0183
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	29 f0       	breq	.+10     	; 0x1a10 <__vector_2+0x40>
		{
			EXTI1_Callback();
    1a06:	e0 91 82 01 	lds	r30, 0x0182
    1a0a:	f0 91 83 01 	lds	r31, 0x0183
    1a0e:	09 95       	icall
		}
}
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	ff 91       	pop	r31
    1a16:	ef 91       	pop	r30
    1a18:	bf 91       	pop	r27
    1a1a:	af 91       	pop	r26
    1a1c:	9f 91       	pop	r25
    1a1e:	8f 91       	pop	r24
    1a20:	7f 91       	pop	r23
    1a22:	6f 91       	pop	r22
    1a24:	5f 91       	pop	r21
    1a26:	4f 91       	pop	r20
    1a28:	3f 91       	pop	r19
    1a2a:	2f 91       	pop	r18
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	0f 90       	pop	r0
    1a32:	1f 90       	pop	r1
    1a34:	18 95       	reti

00001a36 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    1a36:	1f 92       	push	r1
    1a38:	0f 92       	push	r0
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	0f 92       	push	r0
    1a3e:	11 24       	eor	r1, r1
    1a40:	2f 93       	push	r18
    1a42:	3f 93       	push	r19
    1a44:	4f 93       	push	r20
    1a46:	5f 93       	push	r21
    1a48:	6f 93       	push	r22
    1a4a:	7f 93       	push	r23
    1a4c:	8f 93       	push	r24
    1a4e:	9f 93       	push	r25
    1a50:	af 93       	push	r26
    1a52:	bf 93       	push	r27
    1a54:	ef 93       	push	r30
    1a56:	ff 93       	push	r31
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_Callback != NULL)
    1a60:	80 91 84 01 	lds	r24, 0x0184
    1a64:	90 91 85 01 	lds	r25, 0x0185
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	29 f0       	breq	.+10     	; 0x1a76 <__vector_3+0x40>
		{
			EXTI1_Callback();
    1a6c:	e0 91 82 01 	lds	r30, 0x0182
    1a70:	f0 91 83 01 	lds	r31, 0x0183
    1a74:	09 95       	icall
		}
}
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	ff 91       	pop	r31
    1a7c:	ef 91       	pop	r30
    1a7e:	bf 91       	pop	r27
    1a80:	af 91       	pop	r26
    1a82:	9f 91       	pop	r25
    1a84:	8f 91       	pop	r24
    1a86:	7f 91       	pop	r23
    1a88:	6f 91       	pop	r22
    1a8a:	5f 91       	pop	r21
    1a8c:	4f 91       	pop	r20
    1a8e:	3f 91       	pop	r19
    1a90:	2f 91       	pop	r18
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	0f 90       	pop	r0
    1a98:	1f 90       	pop	r1
    1a9a:	18 95       	reti

00001a9c <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_interface.h"
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_Cfg.h"

void MGI_voidEnable(void)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    1aa4:	af e5       	ldi	r26, 0x5F	; 95
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	ef e5       	ldi	r30, 0x5F	; 95
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	80 68       	ori	r24, 0x80	; 128
    1ab0:	8c 93       	st	X, r24
}
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <MGI_voidDisable>:

void MGI_voidDisable(void)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    1ac0:	af e5       	ldi	r26, 0x5F	; 95
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	ef e5       	ldi	r30, 0x5F	; 95
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	8f 77       	andi	r24, 0x7F	; 127
    1acc:	8c 93       	st	X, r24
}
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <HSTP_voidRotate>:
#include "../Include/HAL/STEPPER/HSTP_Interface.h"
#include "../Include/HAL/STEPPER/HSTP_Private.h"
#include "../Include/HAL/STEPPER/HSTP_Cfg.h"

void HSTP_voidRotate(u16 A_Angle)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	c2 54       	subi	r28, 0x42	; 66
    1ade:	d0 40       	sbci	r29, 0x00	; 0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	fe 01       	movw	r30, r28
    1aec:	ef 5b       	subi	r30, 0xBF	; 191
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	80 83       	st	Z, r24
	/*
	 *  	360-->2048
	 * 		X	-->??
	 */
	u32 Local_u32LoopCounterLimit;
	Local_u32LoopCounterLimit= (A_Angle * STEP_CLC)/FULL_ROT;
    1af4:	fe 01       	movw	r30, r28
    1af6:	ef 5b       	subi	r30, 0xBF	; 191
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	cc 01       	movw	r24, r24
    1b00:	a0 e0       	ldi	r26, 0x00	; 0
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	07 2e       	mov	r0, r23
    1b06:	7b e0       	ldi	r23, 0x0B	; 11
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	aa 1f       	adc	r26, r26
    1b0e:	bb 1f       	adc	r27, r27
    1b10:	7a 95       	dec	r23
    1b12:	d1 f7       	brne	.-12     	; 0x1b08 <HSTP_voidRotate+0x34>
    1b14:	70 2d       	mov	r23, r0
    1b16:	28 e6       	ldi	r18, 0x68	; 104
    1b18:	31 e0       	ldi	r19, 0x01	; 1
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	bc 01       	movw	r22, r24
    1b20:	cd 01       	movw	r24, r26
    1b22:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__udivmodsi4>
    1b26:	da 01       	movw	r26, r20
    1b28:	c9 01       	movw	r24, r18
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	fd 96       	adiw	r30, 0x3d	; 61
    1b2e:	80 83       	st	Z, r24
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	a2 83       	std	Z+2, r26	; 0x02
    1b34:	b3 83       	std	Z+3, r27	; 0x03
	Local_u32LoopCounterLimit/=4;
    1b36:	fe 01       	movw	r30, r28
    1b38:	fd 96       	adiw	r30, 0x3d	; 61
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	a2 81       	ldd	r26, Z+2	; 0x02
    1b40:	b3 81       	ldd	r27, Z+3	; 0x03
    1b42:	b6 95       	lsr	r27
    1b44:	a7 95       	ror	r26
    1b46:	97 95       	ror	r25
    1b48:	87 95       	ror	r24
    1b4a:	b6 95       	lsr	r27
    1b4c:	a7 95       	ror	r26
    1b4e:	97 95       	ror	r25
    1b50:	87 95       	ror	r24
    1b52:	fe 01       	movw	r30, r28
    1b54:	fd 96       	adiw	r30, 0x3d	; 61
    1b56:	80 83       	st	Z, r24
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	a2 83       	std	Z+2, r26	; 0x02
    1b5c:	b3 83       	std	Z+3, r27	; 0x03
	for(u32 Local_Loop = 0 ; Local_Loop<=Local_u32LoopCounterLimit ; Local_Loop++)
    1b5e:	19 ae       	std	Y+57, r1	; 0x39
    1b60:	1a ae       	std	Y+58, r1	; 0x3a
    1b62:	1b ae       	std	Y+59, r1	; 0x3b
    1b64:	1c ae       	std	Y+60, r1	; 0x3c
    1b66:	23 c2       	rjmp	.+1094   	; 0x1fae <HSTP_voidRotate+0x4da>
	{
		MDIO_voidSetPinValue(HSTP_Port,BLUE,DIO_RESET);
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,PINK,DIO_SET);
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	41 e0       	ldi	r20, 0x01	; 1
    1b78:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,YELLOW,DIO_SET);
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	62 e0       	ldi	r22, 0x02	; 2
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,ORANGE,DIO_SET);
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	63 e0       	ldi	r22, 0x03	; 3
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e2       	ldi	r26, 0x20	; 32
    1b96:	b1 e4       	ldi	r27, 0x41	; 65
    1b98:	8d ab       	std	Y+53, r24	; 0x35
    1b9a:	9e ab       	std	Y+54, r25	; 0x36
    1b9c:	af ab       	std	Y+55, r26	; 0x37
    1b9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ba2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ba4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ba6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a ef       	ldi	r20, 0xFA	; 250
    1bae:	54 e4       	ldi	r21, 0x44	; 68
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	89 ab       	std	Y+49, r24	; 0x31
    1bba:	9a ab       	std	Y+50, r25	; 0x32
    1bbc:	ab ab       	std	Y+51, r26	; 0x33
    1bbe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <HSTP_voidRotate+0x10e>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	98 ab       	std	Y+48, r25	; 0x30
    1bde:	8f a7       	std	Y+47, r24	; 0x2f
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <HSTP_voidRotate+0x18c>
	else if (__tmp > 65535)
    1be2:	69 a9       	ldd	r22, Y+49	; 0x31
    1be4:	7a a9       	ldd	r23, Y+50	; 0x32
    1be6:	8b a9       	ldd	r24, Y+51	; 0x33
    1be8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <HSTP_voidRotate+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6d a9       	ldd	r22, Y+53	; 0x35
    1bfc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bfe:	8f a9       	ldd	r24, Y+55	; 0x37
    1c00:	98 ad       	ldd	r25, Y+56	; 0x38
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	98 ab       	std	Y+48, r25	; 0x30
    1c20:	8f a7       	std	Y+47, r24	; 0x2f
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <HSTP_voidRotate+0x16e>
    1c24:	88 ec       	ldi	r24, 0xC8	; 200
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9e a7       	std	Y+46, r25	; 0x2e
    1c2a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <HSTP_voidRotate+0x15c>
    1c34:	9e a7       	std	Y+46, r25	; 0x2e
    1c36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	98 ab       	std	Y+48, r25	; 0x30
    1c40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c44:	98 a9       	ldd	r25, Y+48	; 0x30
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <HSTP_voidRotate+0x150>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <HSTP_voidRotate+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c50:	8b a9       	ldd	r24, Y+51	; 0x33
    1c52:	9c a9       	ldd	r25, Y+52	; 0x34
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	98 ab       	std	Y+48, r25	; 0x30
    1c5e:	8f a7       	std	Y+47, r24	; 0x2f
    1c60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c62:	98 a9       	ldd	r25, Y+48	; 0x30
    1c64:	9c a7       	std	Y+44, r25	; 0x2c
    1c66:	8b a7       	std	Y+43, r24	; 0x2b
    1c68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <HSTP_voidRotate+0x198>
    1c70:	9c a7       	std	Y+44, r25	; 0x2c
    1c72:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		MDIO_voidSetPinValue(HSTP_Port,BLUE,DIO_SET);
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,PINK,DIO_RESET);
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,YELLOW,DIO_SET);
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	62 e0       	ldi	r22, 0x02	; 2
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,ORANGE,DIO_SET);
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	63 e0       	ldi	r22, 0x03	; 3
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a0 e2       	ldi	r26, 0x20	; 32
    1ca2:	b1 e4       	ldi	r27, 0x41	; 65
    1ca4:	8f a3       	std	Y+39, r24	; 0x27
    1ca6:	98 a7       	std	Y+40, r25	; 0x28
    1ca8:	a9 a7       	std	Y+41, r26	; 0x29
    1caa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cac:	6f a1       	ldd	r22, Y+39	; 0x27
    1cae:	78 a5       	ldd	r23, Y+40	; 0x28
    1cb0:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4a ef       	ldi	r20, 0xFA	; 250
    1cba:	54 e4       	ldi	r21, 0x44	; 68
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8b a3       	std	Y+35, r24	; 0x23
    1cc6:	9c a3       	std	Y+36, r25	; 0x24
    1cc8:	ad a3       	std	Y+37, r26	; 0x25
    1cca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ccc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cce:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <HSTP_voidRotate+0x21a>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9a a3       	std	Y+34, r25	; 0x22
    1cea:	89 a3       	std	Y+33, r24	; 0x21
    1cec:	3f c0       	rjmp	.+126    	; 0x1d6c <HSTP_voidRotate+0x298>
	else if (__tmp > 65535)
    1cee:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	4c f5       	brge	.+82     	; 0x1d58 <HSTP_voidRotate+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d06:	6f a1       	ldd	r22, Y+39	; 0x27
    1d08:	78 a5       	ldd	r23, Y+40	; 0x28
    1d0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e2       	ldi	r20, 0x20	; 32
    1d14:	51 e4       	ldi	r21, 0x41	; 65
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9a a3       	std	Y+34, r25	; 0x22
    1d2c:	89 a3       	std	Y+33, r24	; 0x21
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <HSTP_voidRotate+0x27a>
    1d30:	88 ec       	ldi	r24, 0xC8	; 200
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	98 a3       	std	Y+32, r25	; 0x20
    1d36:	8f 8f       	std	Y+31, r24	; 0x1f
    1d38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <HSTP_voidRotate+0x268>
    1d40:	98 a3       	std	Y+32, r25	; 0x20
    1d42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	89 a1       	ldd	r24, Y+33	; 0x21
    1d46:	9a a1       	ldd	r25, Y+34	; 0x22
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	9a a3       	std	Y+34, r25	; 0x22
    1d4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d50:	9a a1       	ldd	r25, Y+34	; 0x22
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <HSTP_voidRotate+0x25c>
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <HSTP_voidRotate+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d58:	6b a1       	ldd	r22, Y+35	; 0x23
    1d5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9a a3       	std	Y+34, r25	; 0x22
    1d6a:	89 a3       	std	Y+33, r24	; 0x21
    1d6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d70:	9e 8f       	std	Y+30, r25	; 0x1e
    1d72:	8d 8f       	std	Y+29, r24	; 0x1d
    1d74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <HSTP_voidRotate+0x2a4>
    1d7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d7e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		MDIO_voidSetPinValue(HSTP_Port,BLUE,DIO_SET);
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,PINK,DIO_SET);
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	41 e0       	ldi	r20, 0x01	; 1
    1d90:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,ORANGE,DIO_RESET);
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	63 e0       	ldi	r22, 0x03	; 3
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,YELLOW,DIO_SET);
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	62 e0       	ldi	r22, 0x02	; 2
    1da2:	41 e0       	ldi	r20, 0x01	; 1
    1da4:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e2       	ldi	r26, 0x20	; 32
    1dae:	b1 e4       	ldi	r27, 0x41	; 65
    1db0:	89 8f       	std	Y+25, r24	; 0x19
    1db2:	9a 8f       	std	Y+26, r25	; 0x1a
    1db4:	ab 8f       	std	Y+27, r26	; 0x1b
    1db6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a ef       	ldi	r20, 0xFA	; 250
    1dc6:	54 e4       	ldi	r21, 0x44	; 68
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8d 8b       	std	Y+21, r24	; 0x15
    1dd2:	9e 8b       	std	Y+22, r25	; 0x16
    1dd4:	af 8b       	std	Y+23, r26	; 0x17
    1dd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dda:	7e 89       	ldd	r23, Y+22	; 0x16
    1ddc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dde:	98 8d       	ldd	r25, Y+24	; 0x18
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <HSTP_voidRotate+0x326>
		__ticks = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
    1df8:	3f c0       	rjmp	.+126    	; 0x1e78 <HSTP_voidRotate+0x3a4>
	else if (__tmp > 65535)
    1dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1e00:	98 8d       	ldd	r25, Y+24	; 0x18
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	3f ef       	ldi	r19, 0xFF	; 255
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	57 e4       	ldi	r21, 0x47	; 71
    1e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	4c f5       	brge	.+82     	; 0x1e64 <HSTP_voidRotate+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e12:	69 8d       	ldd	r22, Y+25	; 0x19
    1e14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e2       	ldi	r20, 0x20	; 32
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9c 8b       	std	Y+20, r25	; 0x14
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <HSTP_voidRotate+0x386>
    1e3c:	88 ec       	ldi	r24, 0xC8	; 200
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9a 8b       	std	Y+18, r25	; 0x12
    1e42:	89 8b       	std	Y+17, r24	; 0x11
    1e44:	89 89       	ldd	r24, Y+17	; 0x11
    1e46:	9a 89       	ldd	r25, Y+18	; 0x12
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <HSTP_voidRotate+0x374>
    1e4c:	9a 8b       	std	Y+18, r25	; 0x12
    1e4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	9c 8b       	std	Y+20, r25	; 0x14
    1e58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	69 f7       	brne	.-38     	; 0x1e3c <HSTP_voidRotate+0x368>
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <HSTP_voidRotate+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e64:	6d 89       	ldd	r22, Y+21	; 0x15
    1e66:	7e 89       	ldd	r23, Y+22	; 0x16
    1e68:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9c 8b       	std	Y+20, r25	; 0x14
    1e76:	8b 8b       	std	Y+19, r24	; 0x13
    1e78:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7c:	98 8b       	std	Y+16, r25	; 0x10
    1e7e:	8f 87       	std	Y+15, r24	; 0x0f
    1e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e82:	98 89       	ldd	r25, Y+16	; 0x10
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <HSTP_voidRotate+0x3b0>
    1e88:	98 8b       	std	Y+16, r25	; 0x10
    1e8a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		MDIO_voidSetPinValue(HSTP_Port,BLUE,DIO_SET);
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,PINK,DIO_SET);
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	61 e0       	ldi	r22, 0x01	; 1
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,ORANGE,DIO_SET);
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	63 e0       	ldi	r22, 0x03	; 3
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSTP_Port,YELLOW,DIO_RESET);
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	62 e0       	ldi	r22, 0x02	; 2
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a0 e2       	ldi	r26, 0x20	; 32
    1eba:	b1 e4       	ldi	r27, 0x41	; 65
    1ebc:	8b 87       	std	Y+11, r24	; 0x0b
    1ebe:	9c 87       	std	Y+12, r25	; 0x0c
    1ec0:	ad 87       	std	Y+13, r26	; 0x0d
    1ec2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	4a ef       	ldi	r20, 0xFA	; 250
    1ed2:	54 e4       	ldi	r21, 0x44	; 68
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	8f 83       	std	Y+7, r24	; 0x07
    1ede:	98 87       	std	Y+8, r25	; 0x08
    1ee0:	a9 87       	std	Y+9, r26	; 0x09
    1ee2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee6:	78 85       	ldd	r23, Y+8	; 0x08
    1ee8:	89 85       	ldd	r24, Y+9	; 0x09
    1eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e8       	ldi	r20, 0x80	; 128
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <HSTP_voidRotate+0x432>
		__ticks = 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
    1f04:	3f c0       	rjmp	.+126    	; 0x1f84 <HSTP_voidRotate+0x4b0>
	else if (__tmp > 65535)
    1f06:	6f 81       	ldd	r22, Y+7	; 0x07
    1f08:	78 85       	ldd	r23, Y+8	; 0x08
    1f0a:	89 85       	ldd	r24, Y+9	; 0x09
    1f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	3f ef       	ldi	r19, 0xFF	; 255
    1f12:	4f e7       	ldi	r20, 0x7F	; 127
    1f14:	57 e4       	ldi	r21, 0x47	; 71
    1f16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	4c f5       	brge	.+82     	; 0x1f70 <HSTP_voidRotate+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e2       	ldi	r20, 0x20	; 32
    1f2c:	51 e4       	ldi	r21, 0x41	; 65
    1f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	0f c0       	rjmp	.+30     	; 0x1f66 <HSTP_voidRotate+0x492>
    1f48:	88 ec       	ldi	r24, 0xC8	; 200
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <HSTP_voidRotate+0x480>
    1f58:	9c 83       	std	Y+4, r25	; 0x04
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	69 f7       	brne	.-38     	; 0x1f48 <HSTP_voidRotate+0x474>
    1f6e:	14 c0       	rjmp	.+40     	; 0x1f98 <HSTP_voidRotate+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <HSTP_voidRotate+0x4bc>
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
	 * 		X	-->??
	 */
	u32 Local_u32LoopCounterLimit;
	Local_u32LoopCounterLimit= (A_Angle * STEP_CLC)/FULL_ROT;
	Local_u32LoopCounterLimit/=4;
	for(u32 Local_Loop = 0 ; Local_Loop<=Local_u32LoopCounterLimit ; Local_Loop++)
    1f98:	89 ad       	ldd	r24, Y+57	; 0x39
    1f9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f9c:	ab ad       	ldd	r26, Y+59	; 0x3b
    1f9e:	bc ad       	ldd	r27, Y+60	; 0x3c
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	a1 1d       	adc	r26, r1
    1fa4:	b1 1d       	adc	r27, r1
    1fa6:	89 af       	std	Y+57, r24	; 0x39
    1fa8:	9a af       	std	Y+58, r25	; 0x3a
    1faa:	ab af       	std	Y+59, r26	; 0x3b
    1fac:	bc af       	std	Y+60, r27	; 0x3c
    1fae:	29 ad       	ldd	r18, Y+57	; 0x39
    1fb0:	3a ad       	ldd	r19, Y+58	; 0x3a
    1fb2:	4b ad       	ldd	r20, Y+59	; 0x3b
    1fb4:	5c ad       	ldd	r21, Y+60	; 0x3c
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	fd 96       	adiw	r30, 0x3d	; 61
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	a2 81       	ldd	r26, Z+2	; 0x02
    1fc0:	b3 81       	ldd	r27, Z+3	; 0x03
    1fc2:	82 17       	cp	r24, r18
    1fc4:	93 07       	cpc	r25, r19
    1fc6:	a4 07       	cpc	r26, r20
    1fc8:	b5 07       	cpc	r27, r21
    1fca:	08 f0       	brcs	.+2      	; 0x1fce <HSTP_voidRotate+0x4fa>
    1fcc:	cd cd       	rjmp	.-1126   	; 0x1b68 <HSTP_voidRotate+0x94>
		MDIO_voidSetPinValue(HSTP_Port,PINK,DIO_SET);
		MDIO_voidSetPinValue(HSTP_Port,ORANGE,DIO_SET);
		MDIO_voidSetPinValue(HSTP_Port,YELLOW,DIO_RESET);
		_delay_ms(10);
	}
}
    1fce:	ce 5b       	subi	r28, 0xBE	; 190
    1fd0:	df 4f       	sbci	r29, 0xFF	; 255
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <HKEYPAD_u8GetPressedKey>:
/* KeyWord Static Here Make No One Can Use This Two Arrays Out This File */
u8 static Global_u8SArrOfRows[ROW_NUMBER] = KEYPAD_ROWS;
u8 static Global_u8SArrOfCols[COL_NUMBER] = KEYPAD_COLS;

u8 HKEYPAD_u8GetPressedKey(void)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	63 97       	sbiw	r28, 0x13	; 19
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8KeyValue = KEYPAD_NO_BUTTON_PRESSED;
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	8b 8b       	std	Y+19, r24	; 0x13
	u8 Local_u8RowCounter , Local_u8ColCounter , Local_u8PinValue , Local_u8Flag = FLAG_DOWN ;
    1ffa:	1f 86       	std	Y+15, r1	; 0x0f
    1ffc:	e0 c0       	rjmp	.+448    	; 0x21be <HKEYPAD_u8GetPressedKey+0x1dc>
	while(Local_u8Flag==FLAG_DOWN)
	{
		for(Local_u8RowCounter = 0 ; Local_u8RowCounter <ROW_NUMBER ; Local_u8RowCounter++)
    1ffe:	1a 8a       	std	Y+18, r1	; 0x12
    2000:	da c0       	rjmp	.+436    	; 0x21b6 <HKEYPAD_u8GetPressedKey+0x1d4>
		{
			MDIO_voidSetPinValue(KEYPAD_PORT , Global_u8SArrOfRows[Local_u8RowCounter],DIO_RESET);
    2002:	8a 89       	ldd	r24, Y+18	; 0x12
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	fc 01       	movw	r30, r24
    200a:	e8 58       	subi	r30, 0x88	; 136
    200c:	fe 4f       	sbci	r31, 0xFE	; 254
    200e:	90 81       	ld	r25, Z
    2010:	83 e0       	ldi	r24, 0x03	; 3
    2012:	69 2f       	mov	r22, r25
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
			for (Local_u8ColCounter = 0 ;Local_u8ColCounter< COL_NUMBER ; Local_u8ColCounter++)
    201a:	19 8a       	std	Y+17, r1	; 0x11
    201c:	b6 c0       	rjmp	.+364    	; 0x218a <HKEYPAD_u8GetPressedKey+0x1a8>
			{
				Local_u8PinValue = MDIO_GetPinValue(KEYPAD_PORT,Global_u8SArrOfCols[Local_u8ColCounter]);
    201e:	89 89       	ldd	r24, Y+17	; 0x11
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	fc 01       	movw	r30, r24
    2026:	e4 58       	subi	r30, 0x84	; 132
    2028:	fe 4f       	sbci	r31, 0xFE	; 254
    202a:	90 81       	ld	r25, Z
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	69 2f       	mov	r22, r25
    2030:	0e 94 de 09 	call	0x13bc	; 0x13bc <MDIO_GetPinValue>
    2034:	88 8b       	std	Y+16, r24	; 0x10
				if(Local_u8PinValue == KEY_PRESSED )
    2036:	88 89       	ldd	r24, Y+16	; 0x10
    2038:	88 23       	and	r24, r24
    203a:	09 f0       	breq	.+2      	; 0x203e <HKEYPAD_u8GetPressedKey+0x5c>
    203c:	a3 c0       	rjmp	.+326    	; 0x2184 <HKEYPAD_u8GetPressedKey+0x1a2>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a8 e4       	ldi	r26, 0x48	; 72
    2044:	b2 e4       	ldi	r27, 0x42	; 66
    2046:	8b 87       	std	Y+11, r24	; 0x0b
    2048:	9c 87       	std	Y+12, r25	; 0x0c
    204a:	ad 87       	std	Y+13, r26	; 0x0d
    204c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2050:	7c 85       	ldd	r23, Y+12	; 0x0c
    2052:	8d 85       	ldd	r24, Y+13	; 0x0d
    2054:	9e 85       	ldd	r25, Y+14	; 0x0e
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	4a ef       	ldi	r20, 0xFA	; 250
    205c:	54 e4       	ldi	r21, 0x44	; 68
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	8f 83       	std	Y+7, r24	; 0x07
    2068:	98 87       	std	Y+8, r25	; 0x08
    206a:	a9 87       	std	Y+9, r26	; 0x09
    206c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    206e:	6f 81       	ldd	r22, Y+7	; 0x07
    2070:	78 85       	ldd	r23, Y+8	; 0x08
    2072:	89 85       	ldd	r24, Y+9	; 0x09
    2074:	9a 85       	ldd	r25, Y+10	; 0x0a
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e8       	ldi	r20, 0x80	; 128
    207c:	5f e3       	ldi	r21, 0x3F	; 63
    207e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2082:	88 23       	and	r24, r24
    2084:	2c f4       	brge	.+10     	; 0x2090 <HKEYPAD_u8GetPressedKey+0xae>
		__ticks = 1;
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	3f c0       	rjmp	.+126    	; 0x210e <HKEYPAD_u8GetPressedKey+0x12c>
	else if (__tmp > 65535)
    2090:	6f 81       	ldd	r22, Y+7	; 0x07
    2092:	78 85       	ldd	r23, Y+8	; 0x08
    2094:	89 85       	ldd	r24, Y+9	; 0x09
    2096:	9a 85       	ldd	r25, Y+10	; 0x0a
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	3f ef       	ldi	r19, 0xFF	; 255
    209c:	4f e7       	ldi	r20, 0x7F	; 127
    209e:	57 e4       	ldi	r21, 0x47	; 71
    20a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a4:	18 16       	cp	r1, r24
    20a6:	4c f5       	brge	.+82     	; 0x20fa <HKEYPAD_u8GetPressedKey+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e2       	ldi	r20, 0x20	; 32
    20b6:	51 e4       	ldi	r21, 0x41	; 65
    20b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	0f c0       	rjmp	.+30     	; 0x20f0 <HKEYPAD_u8GetPressedKey+0x10e>
    20d2:	88 ec       	ldi	r24, 0xC8	; 200
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	9c 83       	std	Y+4, r25	; 0x04
    20d8:	8b 83       	std	Y+3, r24	; 0x03
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	9c 81       	ldd	r25, Y+4	; 0x04
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <HKEYPAD_u8GetPressedKey+0xfc>
    20e2:	9c 83       	std	Y+4, r25	; 0x04
    20e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	9e 81       	ldd	r25, Y+6	; 0x06
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	69 f7       	brne	.-38     	; 0x20d2 <HKEYPAD_u8GetPressedKey+0xf0>
    20f8:	14 c0       	rjmp	.+40     	; 0x2122 <HKEYPAD_u8GetPressedKey+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fa:	6f 81       	ldd	r22, Y+7	; 0x07
    20fc:	78 85       	ldd	r23, Y+8	; 0x08
    20fe:	89 85       	ldd	r24, Y+9	; 0x09
    2100:	9a 85       	ldd	r25, Y+10	; 0x0a
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	89 83       	std	Y+1, r24	; 0x01
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <HKEYPAD_u8GetPressedKey+0x138>
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
				{
					/*   To Avoid DEBOUNCING EFFECT    */
					_delay_ms(KEYPAD_DEBOUNCING_DELAY_MS);
					Local_u8PinValue = MDIO_GetPinValue(KEYPAD_PORT,Global_u8SArrOfCols[Local_u8ColCounter]);
    2122:	89 89       	ldd	r24, Y+17	; 0x11
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	fc 01       	movw	r30, r24
    212a:	e4 58       	subi	r30, 0x84	; 132
    212c:	fe 4f       	sbci	r31, 0xFE	; 254
    212e:	90 81       	ld	r25, Z
    2130:	83 e0       	ldi	r24, 0x03	; 3
    2132:	69 2f       	mov	r22, r25
    2134:	0e 94 de 09 	call	0x13bc	; 0x13bc <MDIO_GetPinValue>
    2138:	88 8b       	std	Y+16, r24	; 0x10
    213a:	0c c0       	rjmp	.+24     	; 0x2154 <HKEYPAD_u8GetPressedKey+0x172>
					while(Local_u8PinValue == KEY_PRESSED)
					{
						Local_u8PinValue = MDIO_GetPinValue(KEYPAD_PORT,Global_u8SArrOfCols[Local_u8ColCounter]);
    213c:	89 89       	ldd	r24, Y+17	; 0x11
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	fc 01       	movw	r30, r24
    2144:	e4 58       	subi	r30, 0x84	; 132
    2146:	fe 4f       	sbci	r31, 0xFE	; 254
    2148:	90 81       	ld	r25, Z
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	69 2f       	mov	r22, r25
    214e:	0e 94 de 09 	call	0x13bc	; 0x13bc <MDIO_GetPinValue>
    2152:	88 8b       	std	Y+16, r24	; 0x10
				if(Local_u8PinValue == KEY_PRESSED )
				{
					/*   To Avoid DEBOUNCING EFFECT    */
					_delay_ms(KEYPAD_DEBOUNCING_DELAY_MS);
					Local_u8PinValue = MDIO_GetPinValue(KEYPAD_PORT,Global_u8SArrOfCols[Local_u8ColCounter]);
					while(Local_u8PinValue == KEY_PRESSED)
    2154:	88 89       	ldd	r24, Y+16	; 0x10
    2156:	88 23       	and	r24, r24
    2158:	89 f3       	breq	.-30     	; 0x213c <HKEYPAD_u8GetPressedKey+0x15a>
					{
						Local_u8PinValue = MDIO_GetPinValue(KEYPAD_PORT,Global_u8SArrOfCols[Local_u8ColCounter]);
					}
					Local_u8KeyValue = Global_u8ArrOfKeyPadValues[Local_u8RowCounter][Local_u8ColCounter];
    215a:	8a 89       	ldd	r24, Y+18	; 0x12
    215c:	48 2f       	mov	r20, r24
    215e:	50 e0       	ldi	r21, 0x00	; 0
    2160:	89 89       	ldd	r24, Y+17	; 0x11
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	ca 01       	movw	r24, r20
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	82 0f       	add	r24, r18
    2172:	93 1f       	adc	r25, r19
    2174:	fc 01       	movw	r30, r24
    2176:	e8 59       	subi	r30, 0x98	; 152
    2178:	fe 4f       	sbci	r31, 0xFE	; 254
    217a:	80 81       	ld	r24, Z
    217c:	8b 8b       	std	Y+19, r24	; 0x13
					Local_u8Flag =FLAG_UP;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	8f 87       	std	Y+15, r24	; 0x0f
    2182:	07 c0       	rjmp	.+14     	; 0x2192 <HKEYPAD_u8GetPressedKey+0x1b0>
	while(Local_u8Flag==FLAG_DOWN)
	{
		for(Local_u8RowCounter = 0 ; Local_u8RowCounter <ROW_NUMBER ; Local_u8RowCounter++)
		{
			MDIO_voidSetPinValue(KEYPAD_PORT , Global_u8SArrOfRows[Local_u8RowCounter],DIO_RESET);
			for (Local_u8ColCounter = 0 ;Local_u8ColCounter< COL_NUMBER ; Local_u8ColCounter++)
    2184:	89 89       	ldd	r24, Y+17	; 0x11
    2186:	8f 5f       	subi	r24, 0xFF	; 255
    2188:	89 8b       	std	Y+17, r24	; 0x11
    218a:	89 89       	ldd	r24, Y+17	; 0x11
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	08 f4       	brcc	.+2      	; 0x2192 <HKEYPAD_u8GetPressedKey+0x1b0>
    2190:	46 cf       	rjmp	.-372    	; 0x201e <HKEYPAD_u8GetPressedKey+0x3c>
					/* To Break COLUMS FOR LOOP */
					break;
				}
			}/* END OF COLUMS LOOP */
			/*   Make The Row = 1 Again */
			MDIO_voidSetPinValue(KEYPAD_PORT , Global_u8SArrOfRows[Local_u8RowCounter],DIO_SET);
    2192:	8a 89       	ldd	r24, Y+18	; 0x12
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	fc 01       	movw	r30, r24
    219a:	e8 58       	subi	r30, 0x88	; 136
    219c:	fe 4f       	sbci	r31, 0xFE	; 254
    219e:	90 81       	ld	r25, Z
    21a0:	83 e0       	ldi	r24, 0x03	; 3
    21a2:	69 2f       	mov	r22, r25
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
			if(Local_u8Flag == FLAG_UP)
    21aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	39 f0       	breq	.+14     	; 0x21be <HKEYPAD_u8GetPressedKey+0x1dc>
{
	u8 Local_u8KeyValue = KEYPAD_NO_BUTTON_PRESSED;
	u8 Local_u8RowCounter , Local_u8ColCounter , Local_u8PinValue , Local_u8Flag = FLAG_DOWN ;
	while(Local_u8Flag==FLAG_DOWN)
	{
		for(Local_u8RowCounter = 0 ; Local_u8RowCounter <ROW_NUMBER ; Local_u8RowCounter++)
    21b0:	8a 89       	ldd	r24, Y+18	; 0x12
    21b2:	8f 5f       	subi	r24, 0xFF	; 255
    21b4:	8a 8b       	std	Y+18, r24	; 0x12
    21b6:	8a 89       	ldd	r24, Y+18	; 0x12
    21b8:	84 30       	cpi	r24, 0x04	; 4
    21ba:	08 f4       	brcc	.+2      	; 0x21be <HKEYPAD_u8GetPressedKey+0x1dc>
    21bc:	22 cf       	rjmp	.-444    	; 0x2002 <HKEYPAD_u8GetPressedKey+0x20>

u8 HKEYPAD_u8GetPressedKey(void)
{
	u8 Local_u8KeyValue = KEYPAD_NO_BUTTON_PRESSED;
	u8 Local_u8RowCounter , Local_u8ColCounter , Local_u8PinValue , Local_u8Flag = FLAG_DOWN ;
	while(Local_u8Flag==FLAG_DOWN)
    21be:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c0:	88 23       	and	r24, r24
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <HKEYPAD_u8GetPressedKey+0x1e4>
    21c4:	1c cf       	rjmp	.-456    	; 0x1ffe <HKEYPAD_u8GetPressedKey+0x1c>
			{
				break;
			}
			}/* END OF ROWS LOOP */
	}
	return Local_u8KeyValue;
    21c6:	8b 89       	ldd	r24, Y+19	; 0x13
}
    21c8:	63 96       	adiw	r28, 0x13	; 19
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <HLCD_voidSendData>:
#include"../include/HAL/LCD/LCD_Configuration.h"

#define F_CPU   8000000UL

void HLCD_voidSendData(u8 A_u8Data)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	2f 97       	sbiw	r28, 0x0f	; 15
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	8f 87       	std	Y+15, r24	; 0x0f
	/*   RS >>>>> 1    R/W >>>>>> 0 */
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_SET);
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_RESET);
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
	/*   Send Data To LCD          */
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	6f 85       	ldd	r22, Y+15	; 0x0f
    2208:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
	/*   Set Pulse To Enable (E) To Read Data With 2ms Delay */
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_SET);
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	62 e0       	ldi	r22, 0x02	; 2
    2210:	41 e0       	ldi	r20, 0x01	; 1
    2212:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a0 e0       	ldi	r26, 0x00	; 0
    221c:	b0 e4       	ldi	r27, 0x40	; 64
    221e:	8b 87       	std	Y+11, r24	; 0x0b
    2220:	9c 87       	std	Y+12, r25	; 0x0c
    2222:	ad 87       	std	Y+13, r26	; 0x0d
    2224:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	6b 85       	ldd	r22, Y+11	; 0x0b
    2228:	7c 85       	ldd	r23, Y+12	; 0x0c
    222a:	8d 85       	ldd	r24, Y+13	; 0x0d
    222c:	9e 85       	ldd	r25, Y+14	; 0x0e
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a ef       	ldi	r20, 0xFA	; 250
    2234:	54 e4       	ldi	r21, 0x44	; 68
    2236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	8f 83       	std	Y+7, r24	; 0x07
    2240:	98 87       	std	Y+8, r25	; 0x08
    2242:	a9 87       	std	Y+9, r26	; 0x09
    2244:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2246:	6f 81       	ldd	r22, Y+7	; 0x07
    2248:	78 85       	ldd	r23, Y+8	; 0x08
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	9a 85       	ldd	r25, Y+10	; 0x0a
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
    2266:	3f c0       	rjmp	.+126    	; 0x22e6 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    2268:	6f 81       	ldd	r22, Y+7	; 0x07
    226a:	78 85       	ldd	r23, Y+8	; 0x08
    226c:	89 85       	ldd	r24, Y+9	; 0x09
    226e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	4c f5       	brge	.+82     	; 0x22d2 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	6b 85       	ldd	r22, Y+11	; 0x0b
    2282:	7c 85       	ldd	r23, Y+12	; 0x0c
    2284:	8d 85       	ldd	r24, Y+13	; 0x0d
    2286:	9e 85       	ldd	r25, Y+14	; 0x0e
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9e 83       	std	Y+6, r25	; 0x06
    22a6:	8d 83       	std	Y+5, r24	; 0x05
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <HLCD_voidSendData+0xee>
    22aa:	88 ec       	ldi	r24, 0xC8	; 200
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9c 83       	std	Y+4, r25	; 0x04
    22b0:	8b 83       	std	Y+3, r24	; 0x03
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <HLCD_voidSendData+0xdc>
    22ba:	9c 83       	std	Y+4, r25	; 0x04
    22bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	9e 81       	ldd	r25, Y+6	; 0x06
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	9e 83       	std	Y+6, r25	; 0x06
    22c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	69 f7       	brne	.-38     	; 0x22aa <HLCD_voidSendData+0xd0>
    22d0:	14 c0       	rjmp	.+40     	; 0x22fa <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	6f 81       	ldd	r22, Y+7	; 0x07
    22d4:	78 85       	ldd	r23, Y+8	; 0x08
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
    22e6:	8d 81       	ldd	r24, Y+5	; 0x05
    22e8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	9a 81       	ldd	r25, Y+2	; 0x02
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <HLCD_voidSendData+0x118>
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_RESET);
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	62 e0       	ldi	r22, 0x02	; 2
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>

}
    2304:	2f 96       	adiw	r28, 0x0f	; 15
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <HLCD_voidSendCommond>:

void HLCD_voidSendCommond(u8 A_u8Commond)
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	2f 97       	sbiw	r28, 0x0f	; 15
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	8f 87       	std	Y+15, r24	; 0x0f
	/*   RS >>>> 0    R/W  >>>>> 0  */
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_RESET);
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_RESET);
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	61 e0       	ldi	r22, 0x01	; 1
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
	/*   TO Send Commond To LCD     */
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Commond);
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	6f 85       	ldd	r22, Y+15	; 0x0f
    2344:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
	/*   Set Pulse To Enalbe (E) PIN To Read Commond With 2ms Delay*/
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_SET);
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	62 e0       	ldi	r22, 0x02	; 2
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a0 e0       	ldi	r26, 0x00	; 0
    2358:	b0 e4       	ldi	r27, 0x40	; 64
    235a:	8b 87       	std	Y+11, r24	; 0x0b
    235c:	9c 87       	std	Y+12, r25	; 0x0c
    235e:	ad 87       	std	Y+13, r26	; 0x0d
    2360:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2362:	6b 85       	ldd	r22, Y+11	; 0x0b
    2364:	7c 85       	ldd	r23, Y+12	; 0x0c
    2366:	8d 85       	ldd	r24, Y+13	; 0x0d
    2368:	9e 85       	ldd	r25, Y+14	; 0x0e
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	4a ef       	ldi	r20, 0xFA	; 250
    2370:	54 e4       	ldi	r21, 0x44	; 68
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8f 83       	std	Y+7, r24	; 0x07
    237c:	98 87       	std	Y+8, r25	; 0x08
    237e:	a9 87       	std	Y+9, r26	; 0x09
    2380:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2382:	6f 81       	ldd	r22, Y+7	; 0x07
    2384:	78 85       	ldd	r23, Y+8	; 0x08
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	9a 85       	ldd	r25, Y+10	; 0x0a
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	5f e3       	ldi	r21, 0x3F	; 63
    2392:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2396:	88 23       	and	r24, r24
    2398:	2c f4       	brge	.+10     	; 0x23a4 <HLCD_voidSendCommond+0x8e>
		__ticks = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	3f c0       	rjmp	.+126    	; 0x2422 <HLCD_voidSendCommond+0x10c>
	else if (__tmp > 65535)
    23a4:	6f 81       	ldd	r22, Y+7	; 0x07
    23a6:	78 85       	ldd	r23, Y+8	; 0x08
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	3f ef       	ldi	r19, 0xFF	; 255
    23b0:	4f e7       	ldi	r20, 0x7F	; 127
    23b2:	57 e4       	ldi	r21, 0x47	; 71
    23b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	4c f5       	brge	.+82     	; 0x240e <HLCD_voidSendCommond+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23be:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e2       	ldi	r20, 0x20	; 32
    23ca:	51 e4       	ldi	r21, 0x41	; 65
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <HLCD_voidSendCommond+0xee>
    23e6:	88 ec       	ldi	r24, 0xC8	; 200
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9c 83       	std	Y+4, r25	; 0x04
    23ec:	8b 83       	std	Y+3, r24	; 0x03
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <HLCD_voidSendCommond+0xdc>
    23f6:	9c 83       	std	Y+4, r25	; 0x04
    23f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	69 f7       	brne	.-38     	; 0x23e6 <HLCD_voidSendCommond+0xd0>
    240c:	14 c0       	rjmp	.+40     	; 0x2436 <HLCD_voidSendCommond+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240e:	6f 81       	ldd	r22, Y+7	; 0x07
    2410:	78 85       	ldd	r23, Y+8	; 0x08
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9e 83       	std	Y+6, r25	; 0x06
    2420:	8d 83       	std	Y+5, r24	; 0x05
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <HLCD_voidSendCommond+0x118>
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_RESET);
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	62 e0       	ldi	r22, 0x02	; 2
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
}
    2440:	2f 96       	adiw	r28, 0x0f	; 15
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <HLCD_void8BitInit>:
void HLCD_void8BitInit(void)
{
    2452:	0f 93       	push	r16
    2454:	1f 93       	push	r17
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	cc 54       	subi	r28, 0x4C	; 76
    2460:	d0 40       	sbci	r29, 0x00	; 0
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	fe 01       	movw	r30, r28
    246e:	e7 5b       	subi	r30, 0xB7	; 183
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	ac e0       	ldi	r26, 0x0C	; 12
    2478:	b2 e4       	ldi	r27, 0x42	; 66
    247a:	80 83       	st	Z, r24
    247c:	91 83       	std	Z+1, r25	; 0x01
    247e:	a2 83       	std	Z+2, r26	; 0x02
    2480:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2482:	8e 01       	movw	r16, r28
    2484:	0b 5b       	subi	r16, 0xBB	; 187
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
    2488:	fe 01       	movw	r30, r28
    248a:	e7 5b       	subi	r30, 0xB7	; 183
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a ef       	ldi	r20, 0xFA	; 250
    249c:	54 e4       	ldi	r21, 0x44	; 68
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	f8 01       	movw	r30, r16
    24a8:	80 83       	st	Z, r24
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	a2 83       	std	Z+2, r26	; 0x02
    24ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b0:	fe 01       	movw	r30, r28
    24b2:	eb 5b       	subi	r30, 0xBB	; 187
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	60 81       	ld	r22, Z
    24b8:	71 81       	ldd	r23, Z+1	; 0x01
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e8       	ldi	r20, 0x80	; 128
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ca:	88 23       	and	r24, r24
    24cc:	44 f4       	brge	.+16     	; 0x24de <HLCD_void8BitInit+0x8c>
		__ticks = 1;
    24ce:	fe 01       	movw	r30, r28
    24d0:	ed 5b       	subi	r30, 0xBD	; 189
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	80 83       	st	Z, r24
    24dc:	64 c0       	rjmp	.+200    	; 0x25a6 <HLCD_void8BitInit+0x154>
	else if (__tmp > 65535)
    24de:	fe 01       	movw	r30, r28
    24e0:	eb 5b       	subi	r30, 0xBB	; 187
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	57 e4       	ldi	r21, 0x47	; 71
    24f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	0c f0       	brlt	.+2      	; 0x24fe <HLCD_void8BitInit+0xac>
    24fc:	43 c0       	rjmp	.+134    	; 0x2584 <HLCD_void8BitInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fe:	fe 01       	movw	r30, r28
    2500:	e7 5b       	subi	r30, 0xB7	; 183
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	60 81       	ld	r22, Z
    2506:	71 81       	ldd	r23, Z+1	; 0x01
    2508:	82 81       	ldd	r24, Z+2	; 0x02
    250a:	93 81       	ldd	r25, Z+3	; 0x03
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	8e 01       	movw	r16, r28
    251e:	0d 5b       	subi	r16, 0xBD	; 189
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
    2522:	bc 01       	movw	r22, r24
    2524:	cd 01       	movw	r24, r26
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	f8 01       	movw	r30, r16
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	80 83       	st	Z, r24
    2534:	1f c0       	rjmp	.+62     	; 0x2574 <HLCD_void8BitInit+0x122>
    2536:	fe 01       	movw	r30, r28
    2538:	ef 5b       	subi	r30, 0xBF	; 191
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	88 ec       	ldi	r24, 0xC8	; 200
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
    2544:	fe 01       	movw	r30, r28
    2546:	ef 5b       	subi	r30, 0xBF	; 191
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <HLCD_void8BitInit+0xfc>
    2552:	fe 01       	movw	r30, r28
    2554:	ef 5b       	subi	r30, 0xBF	; 191
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255c:	de 01       	movw	r26, r28
    255e:	ad 5b       	subi	r26, 0xBD	; 189
    2560:	bf 4f       	sbci	r27, 0xFF	; 255
    2562:	fe 01       	movw	r30, r28
    2564:	ed 5b       	subi	r30, 0xBD	; 189
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	11 96       	adiw	r26, 0x01	; 1
    2570:	9c 93       	st	X, r25
    2572:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2574:	fe 01       	movw	r30, r28
    2576:	ed 5b       	subi	r30, 0xBD	; 189
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	d1 f6       	brne	.-76     	; 0x2536 <HLCD_void8BitInit+0xe4>
    2582:	24 c0       	rjmp	.+72     	; 0x25cc <HLCD_void8BitInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	8e 01       	movw	r16, r28
    2586:	0d 5b       	subi	r16, 0xBD	; 189
    2588:	1f 4f       	sbci	r17, 0xFF	; 255
    258a:	fe 01       	movw	r30, r28
    258c:	eb 5b       	subi	r30, 0xBB	; 187
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	f8 01       	movw	r30, r16
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
    25a6:	fe 01       	movw	r30, r28
    25a8:	ed 5b       	subi	r30, 0xBD	; 189
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	fe 01       	movw	r30, r28
    25b2:	ff 96       	adiw	r30, 0x3f	; 63
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	80 83       	st	Z, r24
    25b8:	fe 01       	movw	r30, r28
    25ba:	ff 96       	adiw	r30, 0x3f	; 63
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <HLCD_void8BitInit+0x16e>
    25c4:	fe 01       	movw	r30, r28
    25c6:	ff 96       	adiw	r30, 0x3f	; 63
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
	/*     Wait For More Than  30ms To Let Vcc raise to 4.5V   */
	_delay_ms(35);
	/*                       Function Set                      */
	HLCD_voidSendCommond(FUNCTION_SET);
    25cc:	88 e3       	ldi	r24, 0x38	; 56
    25ce:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendCommond>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 e2       	ldi	r26, 0x20	; 32
    25d8:	b2 e4       	ldi	r27, 0x42	; 66
    25da:	8b af       	std	Y+59, r24	; 0x3b
    25dc:	9c af       	std	Y+60, r25	; 0x3c
    25de:	ad af       	std	Y+61, r26	; 0x3d
    25e0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25e2:	6b ad       	ldd	r22, Y+59	; 0x3b
    25e4:	7c ad       	ldd	r23, Y+60	; 0x3c
    25e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    25e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    25ea:	2b ea       	ldi	r18, 0xAB	; 171
    25ec:	3a ea       	ldi	r19, 0xAA	; 170
    25ee:	4a e2       	ldi	r20, 0x2A	; 42
    25f0:	50 e4       	ldi	r21, 0x40	; 64
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	8f ab       	std	Y+55, r24	; 0x37
    25fc:	98 af       	std	Y+56, r25	; 0x38
    25fe:	a9 af       	std	Y+57, r26	; 0x39
    2600:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2602:	6f a9       	ldd	r22, Y+55	; 0x37
    2604:	78 ad       	ldd	r23, Y+56	; 0x38
    2606:	89 ad       	ldd	r24, Y+57	; 0x39
    2608:	9a ad       	ldd	r25, Y+58	; 0x3a
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	1c f4       	brge	.+6      	; 0x2620 <HLCD_void8BitInit+0x1ce>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	8e ab       	std	Y+54, r24	; 0x36
    261e:	91 c0       	rjmp	.+290    	; 0x2742 <HLCD_void8BitInit+0x2f0>
	else if (__tmp > 255)
    2620:	6f a9       	ldd	r22, Y+55	; 0x37
    2622:	78 ad       	ldd	r23, Y+56	; 0x38
    2624:	89 ad       	ldd	r24, Y+57	; 0x39
    2626:	9a ad       	ldd	r25, Y+58	; 0x3a
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	53 e4       	ldi	r21, 0x43	; 67
    2630:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2634:	18 16       	cp	r1, r24
    2636:	0c f0       	brlt	.+2      	; 0x263a <HLCD_void8BitInit+0x1e8>
    2638:	7b c0       	rjmp	.+246    	; 0x2730 <HLCD_void8BitInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    263a:	6b ad       	ldd	r22, Y+59	; 0x3b
    263c:	7c ad       	ldd	r23, Y+60	; 0x3c
    263e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2640:	9e ad       	ldd	r25, Y+62	; 0x3e
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4a e7       	ldi	r20, 0x7A	; 122
    2648:	54 e4       	ldi	r21, 0x44	; 68
    264a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	8a ab       	std	Y+50, r24	; 0x32
    2654:	9b ab       	std	Y+51, r25	; 0x33
    2656:	ac ab       	std	Y+52, r26	; 0x34
    2658:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265a:	6a a9       	ldd	r22, Y+50	; 0x32
    265c:	7b a9       	ldd	r23, Y+51	; 0x33
    265e:	8c a9       	ldd	r24, Y+52	; 0x34
    2660:	9d a9       	ldd	r25, Y+53	; 0x35
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	4a ef       	ldi	r20, 0xFA	; 250
    2668:	54 e4       	ldi	r21, 0x44	; 68
    266a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	8e a7       	std	Y+46, r24	; 0x2e
    2674:	9f a7       	std	Y+47, r25	; 0x2f
    2676:	a8 ab       	std	Y+48, r26	; 0x30
    2678:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    267a:	6e a5       	ldd	r22, Y+46	; 0x2e
    267c:	7f a5       	ldd	r23, Y+47	; 0x2f
    267e:	88 a9       	ldd	r24, Y+48	; 0x30
    2680:	99 a9       	ldd	r25, Y+49	; 0x31
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e8       	ldi	r20, 0x80	; 128
    2688:	5f e3       	ldi	r21, 0x3F	; 63
    268a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    268e:	88 23       	and	r24, r24
    2690:	2c f4       	brge	.+10     	; 0x269c <HLCD_void8BitInit+0x24a>
		__ticks = 1;
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	9d a7       	std	Y+45, r25	; 0x2d
    2698:	8c a7       	std	Y+44, r24	; 0x2c
    269a:	3f c0       	rjmp	.+126    	; 0x271a <HLCD_void8BitInit+0x2c8>
	else if (__tmp > 65535)
    269c:	6e a5       	ldd	r22, Y+46	; 0x2e
    269e:	7f a5       	ldd	r23, Y+47	; 0x2f
    26a0:	88 a9       	ldd	r24, Y+48	; 0x30
    26a2:	99 a9       	ldd	r25, Y+49	; 0x31
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	3f ef       	ldi	r19, 0xFF	; 255
    26a8:	4f e7       	ldi	r20, 0x7F	; 127
    26aa:	57 e4       	ldi	r21, 0x47	; 71
    26ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26b0:	18 16       	cp	r1, r24
    26b2:	4c f5       	brge	.+82     	; 0x2706 <HLCD_void8BitInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b4:	6a a9       	ldd	r22, Y+50	; 0x32
    26b6:	7b a9       	ldd	r23, Y+51	; 0x33
    26b8:	8c a9       	ldd	r24, Y+52	; 0x34
    26ba:	9d a9       	ldd	r25, Y+53	; 0x35
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e2       	ldi	r20, 0x20	; 32
    26c2:	51 e4       	ldi	r21, 0x41	; 65
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	bc 01       	movw	r22, r24
    26ce:	cd 01       	movw	r24, r26
    26d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	9d a7       	std	Y+45, r25	; 0x2d
    26da:	8c a7       	std	Y+44, r24	; 0x2c
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <HLCD_void8BitInit+0x2aa>
    26de:	88 ec       	ldi	r24, 0xC8	; 200
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	9b a7       	std	Y+43, r25	; 0x2b
    26e4:	8a a7       	std	Y+42, r24	; 0x2a
    26e6:	8a a5       	ldd	r24, Y+42	; 0x2a
    26e8:	9b a5       	ldd	r25, Y+43	; 0x2b
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <HLCD_void8BitInit+0x298>
    26ee:	9b a7       	std	Y+43, r25	; 0x2b
    26f0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f2:	8c a5       	ldd	r24, Y+44	; 0x2c
    26f4:	9d a5       	ldd	r25, Y+45	; 0x2d
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	9d a7       	std	Y+45, r25	; 0x2d
    26fa:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fc:	8c a5       	ldd	r24, Y+44	; 0x2c
    26fe:	9d a5       	ldd	r25, Y+45	; 0x2d
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	69 f7       	brne	.-38     	; 0x26de <HLCD_void8BitInit+0x28c>
    2704:	24 c0       	rjmp	.+72     	; 0x274e <HLCD_void8BitInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2706:	6e a5       	ldd	r22, Y+46	; 0x2e
    2708:	7f a5       	ldd	r23, Y+47	; 0x2f
    270a:	88 a9       	ldd	r24, Y+48	; 0x30
    270c:	99 a9       	ldd	r25, Y+49	; 0x31
    270e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9d a7       	std	Y+45, r25	; 0x2d
    2718:	8c a7       	std	Y+44, r24	; 0x2c
    271a:	8c a5       	ldd	r24, Y+44	; 0x2c
    271c:	9d a5       	ldd	r25, Y+45	; 0x2d
    271e:	99 a7       	std	Y+41, r25	; 0x29
    2720:	88 a7       	std	Y+40, r24	; 0x28
    2722:	88 a5       	ldd	r24, Y+40	; 0x28
    2724:	99 a5       	ldd	r25, Y+41	; 0x29
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <HLCD_void8BitInit+0x2d4>
    272a:	99 a7       	std	Y+41, r25	; 0x29
    272c:	88 a7       	std	Y+40, r24	; 0x28
    272e:	0f c0       	rjmp	.+30     	; 0x274e <HLCD_void8BitInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2730:	6f a9       	ldd	r22, Y+55	; 0x37
    2732:	78 ad       	ldd	r23, Y+56	; 0x38
    2734:	89 ad       	ldd	r24, Y+57	; 0x39
    2736:	9a ad       	ldd	r25, Y+58	; 0x3a
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	8e ab       	std	Y+54, r24	; 0x36
    2742:	8e a9       	ldd	r24, Y+54	; 0x36
    2744:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2746:	8f a1       	ldd	r24, Y+39	; 0x27
    2748:	8a 95       	dec	r24
    274a:	f1 f7       	brne	.-4      	; 0x2748 <HLCD_void8BitInit+0x2f6>
    274c:	8f a3       	std	Y+39, r24	; 0x27
	/*                 Wait For More Than  39MS                */
	_delay_us(40);
	/*                 Display ON/OFF Control                  */
	HLCD_voidSendCommond(DISPLAY_ON_OFF_CONTROL);
    274e:	8c e0       	ldi	r24, 0x0C	; 12
    2750:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendCommond>
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	a0 e2       	ldi	r26, 0x20	; 32
    275a:	b2 e4       	ldi	r27, 0x42	; 66
    275c:	8b a3       	std	Y+35, r24	; 0x23
    275e:	9c a3       	std	Y+36, r25	; 0x24
    2760:	ad a3       	std	Y+37, r26	; 0x25
    2762:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2764:	6b a1       	ldd	r22, Y+35	; 0x23
    2766:	7c a1       	ldd	r23, Y+36	; 0x24
    2768:	8d a1       	ldd	r24, Y+37	; 0x25
    276a:	9e a1       	ldd	r25, Y+38	; 0x26
    276c:	2b ea       	ldi	r18, 0xAB	; 171
    276e:	3a ea       	ldi	r19, 0xAA	; 170
    2770:	4a e2       	ldi	r20, 0x2A	; 42
    2772:	50 e4       	ldi	r21, 0x40	; 64
    2774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	8f 8f       	std	Y+31, r24	; 0x1f
    277e:	98 a3       	std	Y+32, r25	; 0x20
    2780:	a9 a3       	std	Y+33, r26	; 0x21
    2782:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2784:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2786:	78 a1       	ldd	r23, Y+32	; 0x20
    2788:	89 a1       	ldd	r24, Y+33	; 0x21
    278a:	9a a1       	ldd	r25, Y+34	; 0x22
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e8       	ldi	r20, 0x80	; 128
    2792:	5f e3       	ldi	r21, 0x3F	; 63
    2794:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2798:	88 23       	and	r24, r24
    279a:	1c f4       	brge	.+6      	; 0x27a2 <HLCD_void8BitInit+0x350>
		__ticks = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	8e 8f       	std	Y+30, r24	; 0x1e
    27a0:	91 c0       	rjmp	.+290    	; 0x28c4 <HLCD_void8BitInit+0x472>
	else if (__tmp > 255)
    27a2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27a4:	78 a1       	ldd	r23, Y+32	; 0x20
    27a6:	89 a1       	ldd	r24, Y+33	; 0x21
    27a8:	9a a1       	ldd	r25, Y+34	; 0x22
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	4f e7       	ldi	r20, 0x7F	; 127
    27b0:	53 e4       	ldi	r21, 0x43	; 67
    27b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b6:	18 16       	cp	r1, r24
    27b8:	0c f0       	brlt	.+2      	; 0x27bc <HLCD_void8BitInit+0x36a>
    27ba:	7b c0       	rjmp	.+246    	; 0x28b2 <HLCD_void8BitInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    27bc:	6b a1       	ldd	r22, Y+35	; 0x23
    27be:	7c a1       	ldd	r23, Y+36	; 0x24
    27c0:	8d a1       	ldd	r24, Y+37	; 0x25
    27c2:	9e a1       	ldd	r25, Y+38	; 0x26
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4a e7       	ldi	r20, 0x7A	; 122
    27ca:	54 e4       	ldi	r21, 0x44	; 68
    27cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	8a 8f       	std	Y+26, r24	; 0x1a
    27d6:	9b 8f       	std	Y+27, r25	; 0x1b
    27d8:	ac 8f       	std	Y+28, r26	; 0x1c
    27da:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27dc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27de:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27e2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	4a ef       	ldi	r20, 0xFA	; 250
    27ea:	54 e4       	ldi	r21, 0x44	; 68
    27ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	8e 8b       	std	Y+22, r24	; 0x16
    27f6:	9f 8b       	std	Y+23, r25	; 0x17
    27f8:	a8 8f       	std	Y+24, r26	; 0x18
    27fa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    27fc:	6e 89       	ldd	r22, Y+22	; 0x16
    27fe:	7f 89       	ldd	r23, Y+23	; 0x17
    2800:	88 8d       	ldd	r24, Y+24	; 0x18
    2802:	99 8d       	ldd	r25, Y+25	; 0x19
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e8       	ldi	r20, 0x80	; 128
    280a:	5f e3       	ldi	r21, 0x3F	; 63
    280c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2810:	88 23       	and	r24, r24
    2812:	2c f4       	brge	.+10     	; 0x281e <HLCD_void8BitInit+0x3cc>
		__ticks = 1;
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	9d 8b       	std	Y+21, r25	; 0x15
    281a:	8c 8b       	std	Y+20, r24	; 0x14
    281c:	3f c0       	rjmp	.+126    	; 0x289c <HLCD_void8BitInit+0x44a>
	else if (__tmp > 65535)
    281e:	6e 89       	ldd	r22, Y+22	; 0x16
    2820:	7f 89       	ldd	r23, Y+23	; 0x17
    2822:	88 8d       	ldd	r24, Y+24	; 0x18
    2824:	99 8d       	ldd	r25, Y+25	; 0x19
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	3f ef       	ldi	r19, 0xFF	; 255
    282a:	4f e7       	ldi	r20, 0x7F	; 127
    282c:	57 e4       	ldi	r21, 0x47	; 71
    282e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2832:	18 16       	cp	r1, r24
    2834:	4c f5       	brge	.+82     	; 0x2888 <HLCD_void8BitInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2836:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2838:	7b 8d       	ldd	r23, Y+27	; 0x1b
    283a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    283c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e2       	ldi	r20, 0x20	; 32
    2844:	51 e4       	ldi	r21, 0x41	; 65
    2846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	bc 01       	movw	r22, r24
    2850:	cd 01       	movw	r24, r26
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9d 8b       	std	Y+21, r25	; 0x15
    285c:	8c 8b       	std	Y+20, r24	; 0x14
    285e:	0f c0       	rjmp	.+30     	; 0x287e <HLCD_void8BitInit+0x42c>
    2860:	88 ec       	ldi	r24, 0xC8	; 200
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	9b 8b       	std	Y+19, r25	; 0x13
    2866:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2868:	8a 89       	ldd	r24, Y+18	; 0x12
    286a:	9b 89       	ldd	r25, Y+19	; 0x13
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <HLCD_void8BitInit+0x41a>
    2870:	9b 8b       	std	Y+19, r25	; 0x13
    2872:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2874:	8c 89       	ldd	r24, Y+20	; 0x14
    2876:	9d 89       	ldd	r25, Y+21	; 0x15
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	9d 8b       	std	Y+21, r25	; 0x15
    287c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287e:	8c 89       	ldd	r24, Y+20	; 0x14
    2880:	9d 89       	ldd	r25, Y+21	; 0x15
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	69 f7       	brne	.-38     	; 0x2860 <HLCD_void8BitInit+0x40e>
    2886:	24 c0       	rjmp	.+72     	; 0x28d0 <HLCD_void8BitInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2888:	6e 89       	ldd	r22, Y+22	; 0x16
    288a:	7f 89       	ldd	r23, Y+23	; 0x17
    288c:	88 8d       	ldd	r24, Y+24	; 0x18
    288e:	99 8d       	ldd	r25, Y+25	; 0x19
    2890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	9d 8b       	std	Y+21, r25	; 0x15
    289a:	8c 8b       	std	Y+20, r24	; 0x14
    289c:	8c 89       	ldd	r24, Y+20	; 0x14
    289e:	9d 89       	ldd	r25, Y+21	; 0x15
    28a0:	99 8b       	std	Y+17, r25	; 0x11
    28a2:	88 8b       	std	Y+16, r24	; 0x10
    28a4:	88 89       	ldd	r24, Y+16	; 0x10
    28a6:	99 89       	ldd	r25, Y+17	; 0x11
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <HLCD_void8BitInit+0x456>
    28ac:	99 8b       	std	Y+17, r25	; 0x11
    28ae:	88 8b       	std	Y+16, r24	; 0x10
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <HLCD_void8BitInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28b2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28b4:	78 a1       	ldd	r23, Y+32	; 0x20
    28b6:	89 a1       	ldd	r24, Y+33	; 0x21
    28b8:	9a a1       	ldd	r25, Y+34	; 0x22
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	8e 8f       	std	Y+30, r24	; 0x1e
    28c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28c6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ca:	8a 95       	dec	r24
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <HLCD_void8BitInit+0x478>
    28ce:	8f 87       	std	Y+15, r24	; 0x0f
	/*                 Wait for More Than  39MS                */
	_delay_us(40);
	/*                 Display Clear Commonc                   */
	HLCD_voidSendCommond(DISPLAY_CLEAR);
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendCommond>
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	a0 e0       	ldi	r26, 0x00	; 0
    28dc:	b0 e4       	ldi	r27, 0x40	; 64
    28de:	8b 87       	std	Y+11, r24	; 0x0b
    28e0:	9c 87       	std	Y+12, r25	; 0x0c
    28e2:	ad 87       	std	Y+13, r26	; 0x0d
    28e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	4a ef       	ldi	r20, 0xFA	; 250
    28f4:	54 e4       	ldi	r21, 0x44	; 68
    28f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	8f 83       	std	Y+7, r24	; 0x07
    2900:	98 87       	std	Y+8, r25	; 0x08
    2902:	a9 87       	std	Y+9, r26	; 0x09
    2904:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2906:	6f 81       	ldd	r22, Y+7	; 0x07
    2908:	78 85       	ldd	r23, Y+8	; 0x08
    290a:	89 85       	ldd	r24, Y+9	; 0x09
    290c:	9a 85       	ldd	r25, Y+10	; 0x0a
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e8       	ldi	r20, 0x80	; 128
    2914:	5f e3       	ldi	r21, 0x3F	; 63
    2916:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    291a:	88 23       	and	r24, r24
    291c:	2c f4       	brge	.+10     	; 0x2928 <HLCD_void8BitInit+0x4d6>
		__ticks = 1;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	9e 83       	std	Y+6, r25	; 0x06
    2924:	8d 83       	std	Y+5, r24	; 0x05
    2926:	3f c0       	rjmp	.+126    	; 0x29a6 <HLCD_void8BitInit+0x554>
	else if (__tmp > 65535)
    2928:	6f 81       	ldd	r22, Y+7	; 0x07
    292a:	78 85       	ldd	r23, Y+8	; 0x08
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	3f ef       	ldi	r19, 0xFF	; 255
    2934:	4f e7       	ldi	r20, 0x7F	; 127
    2936:	57 e4       	ldi	r21, 0x47	; 71
    2938:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    293c:	18 16       	cp	r1, r24
    293e:	4c f5       	brge	.+82     	; 0x2992 <HLCD_void8BitInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2940:	6b 85       	ldd	r22, Y+11	; 0x0b
    2942:	7c 85       	ldd	r23, Y+12	; 0x0c
    2944:	8d 85       	ldd	r24, Y+13	; 0x0d
    2946:	9e 85       	ldd	r25, Y+14	; 0x0e
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e2       	ldi	r20, 0x20	; 32
    294e:	51 e4       	ldi	r21, 0x41	; 65
    2950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	9e 83       	std	Y+6, r25	; 0x06
    2966:	8d 83       	std	Y+5, r24	; 0x05
    2968:	0f c0       	rjmp	.+30     	; 0x2988 <HLCD_void8BitInit+0x536>
    296a:	88 ec       	ldi	r24, 0xC8	; 200
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	9c 83       	std	Y+4, r25	; 0x04
    2970:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	9c 81       	ldd	r25, Y+4	; 0x04
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <HLCD_void8BitInit+0x524>
    297a:	9c 83       	std	Y+4, r25	; 0x04
    297c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297e:	8d 81       	ldd	r24, Y+5	; 0x05
    2980:	9e 81       	ldd	r25, Y+6	; 0x06
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	9e 83       	std	Y+6, r25	; 0x06
    2986:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	69 f7       	brne	.-38     	; 0x296a <HLCD_void8BitInit+0x518>
    2990:	14 c0       	rjmp	.+40     	; 0x29ba <HLCD_void8BitInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2992:	6f 81       	ldd	r22, Y+7	; 0x07
    2994:	78 85       	ldd	r23, Y+8	; 0x08
    2996:	89 85       	ldd	r24, Y+9	; 0x09
    2998:	9a 85       	ldd	r25, Y+10	; 0x0a
    299a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	9a 83       	std	Y+2, r25	; 0x02
    29ac:	89 83       	std	Y+1, r24	; 0x01
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	9a 81       	ldd	r25, Y+2	; 0x02
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <HLCD_void8BitInit+0x560>
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	89 83       	std	Y+1, r24	; 0x01
	/*                 Wait for More Than 1.35ms               */
	_delay_ms(2);
	/*                    Entry  Set Mode                      */
	HLCD_voidSendCommond(ENTRY_SET_MODE);
    29ba:	86 e0       	ldi	r24, 0x06	; 6
    29bc:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendCommond>
	/*                         END                             */
}
    29c0:	c4 5b       	subi	r28, 0xB4	; 180
    29c2:	df 4f       	sbci	r29, 0xFF	; 255
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	de bf       	out	0x3e, r29	; 62
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	cd bf       	out	0x3d, r28	; 61
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	08 95       	ret

000029d8 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	2e 97       	sbiw	r28, 0x0e	; 14
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
	/*                 Display Clear Commonc                  */
	HLCD_voidSendCommond(DISPLAY_CLEAR);
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendCommond>
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a0 e0       	ldi	r26, 0x00	; 0
    29f8:	b0 e4       	ldi	r27, 0x40	; 64
    29fa:	8b 87       	std	Y+11, r24	; 0x0b
    29fc:	9c 87       	std	Y+12, r25	; 0x0c
    29fe:	ad 87       	std	Y+13, r26	; 0x0d
    2a00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	4a ef       	ldi	r20, 0xFA	; 250
    2a10:	54 e4       	ldi	r21, 0x44	; 68
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	8f 83       	std	Y+7, r24	; 0x07
    2a1c:	98 87       	std	Y+8, r25	; 0x08
    2a1e:	a9 87       	std	Y+9, r26	; 0x09
    2a20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a22:	6f 81       	ldd	r22, Y+7	; 0x07
    2a24:	78 85       	ldd	r23, Y+8	; 0x08
    2a26:	89 85       	ldd	r24, Y+9	; 0x09
    2a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e8       	ldi	r20, 0x80	; 128
    2a30:	5f e3       	ldi	r21, 0x3F	; 63
    2a32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a36:	88 23       	and	r24, r24
    2a38:	2c f4       	brge	.+10     	; 0x2a44 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9e 83       	std	Y+6, r25	; 0x06
    2a40:	8d 83       	std	Y+5, r24	; 0x05
    2a42:	3f c0       	rjmp	.+126    	; 0x2ac2 <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    2a44:	6f 81       	ldd	r22, Y+7	; 0x07
    2a46:	78 85       	ldd	r23, Y+8	; 0x08
    2a48:	89 85       	ldd	r24, Y+9	; 0x09
    2a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	3f ef       	ldi	r19, 0xFF	; 255
    2a50:	4f e7       	ldi	r20, 0x7F	; 127
    2a52:	57 e4       	ldi	r21, 0x47	; 71
    2a54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a58:	18 16       	cp	r1, r24
    2a5a:	4c f5       	brge	.+82     	; 0x2aae <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e2       	ldi	r20, 0x20	; 32
    2a6a:	51 e4       	ldi	r21, 0x41	; 65
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
    2a84:	0f c0       	rjmp	.+30     	; 0x2aa4 <HLCD_voidClearDisplay+0xcc>
    2a86:	88 ec       	ldi	r24, 0xC8	; 200
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	9c 83       	std	Y+4, r25	; 0x04
    2a8c:	8b 83       	std	Y+3, r24	; 0x03
    2a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a90:	9c 81       	ldd	r25, Y+4	; 0x04
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <HLCD_voidClearDisplay+0xba>
    2a96:	9c 83       	std	Y+4, r25	; 0x04
    2a98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	9e 83       	std	Y+6, r25	; 0x06
    2aa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	69 f7       	brne	.-38     	; 0x2a86 <HLCD_voidClearDisplay+0xae>
    2aac:	14 c0       	rjmp	.+40     	; 0x2ad6 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aae:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab0:	78 85       	ldd	r23, Y+8	; 0x08
    2ab2:	89 85       	ldd	r24, Y+9	; 0x09
    2ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
    2ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac6:	9a 83       	std	Y+2, r25	; 0x02
    2ac8:	89 83       	std	Y+1, r24	; 0x01
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <HLCD_voidClearDisplay+0xf6>
    2ad2:	9a 83       	std	Y+2, r25	; 0x02
    2ad4:	89 83       	std	Y+1, r24	; 0x01
	/*                 Wait for More Than 1.35ms               */
	_delay_ms(2);
}
    2ad6:	2e 96       	adiw	r28, 0x0e	; 14
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *A_Pu8String)
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <HLCD_voidSendString+0x6>
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	9a 83       	std	Y+2, r25	; 0x02
    2af4:	89 83       	std	Y+1, r24	; 0x01
    2af6:	0b c0       	rjmp	.+22     	; 0x2b0e <HLCD_voidSendString+0x26>
	while(*A_Pu8String != '\0')
	{
		HLCD_voidSendData(*A_Pu8String++);
    2af8:	e9 81       	ldd	r30, Y+1	; 0x01
    2afa:	fa 81       	ldd	r31, Y+2	; 0x02
    2afc:	20 81       	ld	r18, Z
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	9a 81       	ldd	r25, Y+2	; 0x02
    2b02:	01 96       	adiw	r24, 0x01	; 1
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	82 2f       	mov	r24, r18
    2b0a:	0e 94 ed 10 	call	0x21da	; 0x21da <HLCD_voidSendData>
	_delay_ms(2);
}

void HLCD_voidSendString(u8 *A_Pu8String)
{
	while(*A_Pu8String != '\0')
    2b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b10:	fa 81       	ldd	r31, Y+2	; 0x02
    2b12:	80 81       	ld	r24, Z
    2b14:	88 23       	and	r24, r24
    2b16:	81 f7       	brne	.-32     	; 0x2af8 <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*A_Pu8String++);
	}
}
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(u32 A_u32Number)
{
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	28 97       	sbiw	r28, 0x08	; 8
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	6d 83       	std	Y+5, r22	; 0x05
    2b40:	7e 83       	std	Y+6, r23	; 0x06
    2b42:	8f 83       	std	Y+7, r24	; 0x07
    2b44:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Number = 1;
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a0 e0       	ldi	r26, 0x00	; 0
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	89 83       	std	Y+1, r24	; 0x01
    2b50:	9a 83       	std	Y+2, r25	; 0x02
    2b52:	ab 83       	std	Y+3, r26	; 0x03
    2b54:	bc 83       	std	Y+4, r27	; 0x04
	if (A_u32Number == 0)
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5a:	af 81       	ldd	r26, Y+7	; 0x07
    2b5c:	b8 85       	ldd	r27, Y+8	; 0x08
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	a1 05       	cpc	r26, r1
    2b62:	b1 05       	cpc	r27, r1
    2b64:	d1 f5       	brne	.+116    	; 0x2bda <HLCD_voidDisplayNumber+0xb8>
	{
		HLCD_voidSendData('0');
    2b66:	80 e3       	ldi	r24, 0x30	; 48
    2b68:	0e 94 ed 10 	call	0x21da	; 0x21da <HLCD_voidSendData>
    2b6c:	36 c0       	rjmp	.+108    	; 0x2bda <HLCD_voidDisplayNumber+0xb8>
	}
	while(A_u32Number != 0)
	{
		Local_u32Number = ((Local_u32Number * 10) + (A_u32Number % 10));
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	ab 81       	ldd	r26, Y+3	; 0x03
    2b74:	bc 81       	ldd	r27, Y+4	; 0x04
    2b76:	2a e0       	ldi	r18, 0x0A	; 10
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	50 e0       	ldi	r21, 0x00	; 0
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 3a 19 	call	0x3274	; 0x3274 <__mulsi3>
    2b86:	7b 01       	movw	r14, r22
    2b88:	8c 01       	movw	r16, r24
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8e:	af 81       	ldd	r26, Y+7	; 0x07
    2b90:	b8 85       	ldd	r27, Y+8	; 0x08
    2b92:	2a e0       	ldi	r18, 0x0A	; 10
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__udivmodsi4>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	8e 0d       	add	r24, r14
    2ba8:	9f 1d       	adc	r25, r15
    2baa:	a0 1f       	adc	r26, r16
    2bac:	b1 1f       	adc	r27, r17
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	9a 83       	std	Y+2, r25	; 0x02
    2bb2:	ab 83       	std	Y+3, r26	; 0x03
    2bb4:	bc 83       	std	Y+4, r27	; 0x04
		A_u32Number = A_u32Number/10;
    2bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bba:	af 81       	ldd	r26, Y+7	; 0x07
    2bbc:	b8 85       	ldd	r27, Y+8	; 0x08
    2bbe:	2a e0       	ldi	r18, 0x0A	; 10
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	50 e0       	ldi	r21, 0x00	; 0
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__udivmodsi4>
    2bce:	da 01       	movw	r26, r20
    2bd0:	c9 01       	movw	r24, r18
    2bd2:	8d 83       	std	Y+5, r24	; 0x05
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	af 83       	std	Y+7, r26	; 0x07
    2bd8:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u32Number = 1;
	if (A_u32Number == 0)
	{
		HLCD_voidSendData('0');
	}
	while(A_u32Number != 0)
    2bda:	8d 81       	ldd	r24, Y+5	; 0x05
    2bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bde:	af 81       	ldd	r26, Y+7	; 0x07
    2be0:	b8 85       	ldd	r27, Y+8	; 0x08
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	a1 05       	cpc	r26, r1
    2be6:	b1 05       	cpc	r27, r1
    2be8:	11 f6       	brne	.-124    	; 0x2b6e <HLCD_voidDisplayNumber+0x4c>
    2bea:	23 c0       	rjmp	.+70     	; 0x2c32 <HLCD_voidDisplayNumber+0x110>
		Local_u32Number = ((Local_u32Number * 10) + (A_u32Number % 10));
		A_u32Number = A_u32Number/10;
	}
	while(Local_u32Number != 1)
	{
		HLCD_voidSendData((Local_u32Number % 10) + 48 );
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf0:	ab 81       	ldd	r26, Y+3	; 0x03
    2bf2:	bc 81       	ldd	r27, Y+4	; 0x04
    2bf4:	2a e0       	ldi	r18, 0x0A	; 10
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__udivmodsi4>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	80 5d       	subi	r24, 0xD0	; 208
    2c0a:	0e 94 ed 10 	call	0x21da	; 0x21da <HLCD_voidSendData>
		Local_u32Number = Local_u32Number / 10;
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	9a 81       	ldd	r25, Y+2	; 0x02
    2c12:	ab 81       	ldd	r26, Y+3	; 0x03
    2c14:	bc 81       	ldd	r27, Y+4	; 0x04
    2c16:	2a e0       	ldi	r18, 0x0A	; 10
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	50 e0       	ldi	r21, 0x00	; 0
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__udivmodsi4>
    2c26:	da 01       	movw	r26, r20
    2c28:	c9 01       	movw	r24, r18
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	ab 83       	std	Y+3, r26	; 0x03
    2c30:	bc 83       	std	Y+4, r27	; 0x04
	while(A_u32Number != 0)
	{
		Local_u32Number = ((Local_u32Number * 10) + (A_u32Number % 10));
		A_u32Number = A_u32Number/10;
	}
	while(Local_u32Number != 1)
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	ab 81       	ldd	r26, Y+3	; 0x03
    2c38:	bc 81       	ldd	r27, Y+4	; 0x04
    2c3a:	81 30       	cpi	r24, 0x01	; 1
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	a1 05       	cpc	r26, r1
    2c40:	b1 05       	cpc	r27, r1
    2c42:	a1 f6       	brne	.-88     	; 0x2bec <HLCD_voidDisplayNumber+0xca>
	{
		HLCD_voidSendData((Local_u32Number % 10) + 48 );
		Local_u32Number = Local_u32Number / 10;
	}
}
    2c44:	28 96       	adiw	r28, 0x08	; 8
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	08 95       	ret

00002c5e <HLCD_voidGoToPos>:

void HLCD_voidGoToPos(u8 A_u8RowNum , u8 A_u8ColNum)
{
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	62 97       	sbiw	r28, 0x12	; 18
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	8f 87       	std	Y+15, r24	; 0x0f
    2c74:	68 8b       	std	Y+16, r22	; 0x10
	switch(A_u8RowNum)
    2c76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c78:	28 2f       	mov	r18, r24
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	3a 8b       	std	Y+18, r19	; 0x12
    2c7e:	29 8b       	std	Y+17, r18	; 0x11
    2c80:	89 89       	ldd	r24, Y+17	; 0x11
    2c82:	9a 89       	ldd	r25, Y+18	; 0x12
    2c84:	81 30       	cpi	r24, 0x01	; 1
    2c86:	91 05       	cpc	r25, r1
    2c88:	31 f0       	breq	.+12     	; 0x2c96 <HLCD_voidGoToPos+0x38>
    2c8a:	29 89       	ldd	r18, Y+17	; 0x11
    2c8c:	3a 89       	ldd	r19, Y+18	; 0x12
    2c8e:	22 30       	cpi	r18, 0x02	; 2
    2c90:	31 05       	cpc	r19, r1
    2c92:	31 f0       	breq	.+12     	; 0x2ca0 <HLCD_voidGoToPos+0x42>
    2c94:	09 c0       	rjmp	.+18     	; 0x2ca8 <HLCD_voidGoToPos+0x4a>
	{
		case LCD_ROW_ONE:
			HLCD_voidSendCommond(LCD_ROW1_ADDRESS + A_u8ColNum);
    2c96:	88 89       	ldd	r24, Y+16	; 0x10
    2c98:	81 58       	subi	r24, 0x81	; 129
    2c9a:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendCommond>
    2c9e:	04 c0       	rjmp	.+8      	; 0x2ca8 <HLCD_voidGoToPos+0x4a>
			break;
		case LCD_ROW_TWO:
			HLCD_voidSendCommond(LCD_ROW2_ADDRESS + A_u8ColNum);
    2ca0:	88 89       	ldd	r24, Y+16	; 0x10
    2ca2:	81 54       	subi	r24, 0x41	; 65
    2ca4:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendCommond>
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	a0 e8       	ldi	r26, 0x80	; 128
    2cae:	bf e3       	ldi	r27, 0x3F	; 63
    2cb0:	8b 87       	std	Y+11, r24	; 0x0b
    2cb2:	9c 87       	std	Y+12, r25	; 0x0c
    2cb4:	ad 87       	std	Y+13, r26	; 0x0d
    2cb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a ef       	ldi	r20, 0xFA	; 250
    2cc6:	54 e4       	ldi	r21, 0x44	; 68
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	8f 83       	std	Y+7, r24	; 0x07
    2cd2:	98 87       	std	Y+8, r25	; 0x08
    2cd4:	a9 87       	std	Y+9, r26	; 0x09
    2cd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cda:	78 85       	ldd	r23, Y+8	; 0x08
    2cdc:	89 85       	ldd	r24, Y+9	; 0x09
    2cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	2c f4       	brge	.+10     	; 0x2cfa <HLCD_voidGoToPos+0x9c>
		__ticks = 1;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	9e 83       	std	Y+6, r25	; 0x06
    2cf6:	8d 83       	std	Y+5, r24	; 0x05
    2cf8:	3f c0       	rjmp	.+126    	; 0x2d78 <HLCD_voidGoToPos+0x11a>
	else if (__tmp > 65535)
    2cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfc:	78 85       	ldd	r23, Y+8	; 0x08
    2cfe:	89 85       	ldd	r24, Y+9	; 0x09
    2d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	3f ef       	ldi	r19, 0xFF	; 255
    2d06:	4f e7       	ldi	r20, 0x7F	; 127
    2d08:	57 e4       	ldi	r21, 0x47	; 71
    2d0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0e:	18 16       	cp	r1, r24
    2d10:	4c f5       	brge	.+82     	; 0x2d64 <HLCD_voidGoToPos+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e2       	ldi	r20, 0x20	; 32
    2d20:	51 e4       	ldi	r21, 0x41	; 65
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    2d3a:	0f c0       	rjmp	.+30     	; 0x2d5a <HLCD_voidGoToPos+0xfc>
    2d3c:	88 ec       	ldi	r24, 0xC8	; 200
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9c 83       	std	Y+4, r25	; 0x04
    2d42:	8b 83       	std	Y+3, r24	; 0x03
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <HLCD_voidGoToPos+0xea>
    2d4c:	9c 83       	std	Y+4, r25	; 0x04
    2d4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d50:	8d 81       	ldd	r24, Y+5	; 0x05
    2d52:	9e 81       	ldd	r25, Y+6	; 0x06
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	9e 83       	std	Y+6, r25	; 0x06
    2d58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	69 f7       	brne	.-38     	; 0x2d3c <HLCD_voidGoToPos+0xde>
    2d62:	14 c0       	rjmp	.+40     	; 0x2d8c <HLCD_voidGoToPos+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d64:	6f 81       	ldd	r22, Y+7	; 0x07
    2d66:	78 85       	ldd	r23, Y+8	; 0x08
    2d68:	89 85       	ldd	r24, Y+9	; 0x09
    2d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
    2d78:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	9a 81       	ldd	r25, Y+2	; 0x02
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <HLCD_voidGoToPos+0x126>
    2d88:	9a 83       	std	Y+2, r25	; 0x02
    2d8a:	89 83       	std	Y+1, r24	; 0x01
			break;
		default :
			break;
	}
	_delay_ms(1);
}
    2d8c:	62 96       	adiw	r28, 0x12	; 18
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <HLCD_voidSendSpecialCharacter>:

void HLCD_voidSendSpecialCharacter(u8 *A_Pu8CharArr ,u8 A_u8PatternNum,u8 A_u8RowNum, u8 A_u8ColNum)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	27 97       	sbiw	r28, 0x07	; 7
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	9c 83       	std	Y+4, r25	; 0x04
    2db4:	8b 83       	std	Y+3, r24	; 0x03
    2db6:	6d 83       	std	Y+5, r22	; 0x05
    2db8:	4e 83       	std	Y+6, r20	; 0x06
    2dba:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress , Local_u8Counter;
	/* Calculate CGRAM Address = Pattern Num * 8 */
	Local_u8CGRAMAddress = A_u8PatternNum * 8 ;
    2dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbe:	88 2f       	mov	r24, r24
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	88 0f       	add	r24, r24
    2dc4:	99 1f       	adc	r25, r25
    2dc6:	88 0f       	add	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	88 0f       	add	r24, r24
    2dcc:	99 1f       	adc	r25, r25
    2dce:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(Local_u8CGRAMAddress,6);
    2dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd2:	80 64       	ori	r24, 0x40	; 64
    2dd4:	8a 83       	std	Y+2, r24	; 0x02
	/* Send Command To CGRAM Address    */
	HLCD_voidSendCommond(Local_u8CGRAMAddress);
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendCommond>

	for (Local_u8Counter = 0; Local_u8Counter < 8 ; Local_u8Counter++)
    2ddc:	19 82       	std	Y+1, r1	; 0x01
    2dde:	0e c0       	rjmp	.+28     	; 0x2dfc <HLCD_voidSendSpecialCharacter+0x5e>
	{
		/* Send Byte From Array OF Character   */
		HLCD_voidSendData(A_Pu8CharArr[Local_u8Counter]);
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	fc 01       	movw	r30, r24
    2dec:	e2 0f       	add	r30, r18
    2dee:	f3 1f       	adc	r31, r19
    2df0:	80 81       	ld	r24, Z
    2df2:	0e 94 ed 10 	call	0x21da	; 0x21da <HLCD_voidSendData>
	Local_u8CGRAMAddress = A_u8PatternNum * 8 ;
	SET_BIT(Local_u8CGRAMAddress,6);
	/* Send Command To CGRAM Address    */
	HLCD_voidSendCommond(Local_u8CGRAMAddress);

	for (Local_u8Counter = 0; Local_u8Counter < 8 ; Local_u8Counter++)
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	8f 5f       	subi	r24, 0xFF	; 255
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	88 30       	cpi	r24, 0x08	; 8
    2e00:	78 f3       	brcs	.-34     	; 0x2de0 <HLCD_voidSendSpecialCharacter+0x42>
	{
		/* Send Byte From Array OF Character   */
		HLCD_voidSendData(A_Pu8CharArr[Local_u8Counter]);
	}
	/*   Make The Special Character to Go To Position   */
	HLCD_voidGoToPos(A_u8RowNum,A_u8ColNum);
    2e02:	8e 81       	ldd	r24, Y+6	; 0x06
    2e04:	6f 81       	ldd	r22, Y+7	; 0x07
    2e06:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <HLCD_voidGoToPos>
	/* Display Pattern From CGRAM   */
	HLCD_voidSendData(A_u8PatternNum);
    2e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0c:	0e 94 ed 10 	call	0x21da	; 0x21da <HLCD_voidSendData>
}
    2e10:	27 96       	adiw	r28, 0x07	; 7
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	cd bf       	out	0x3d, r28	; 61
    2e1c:	cf 91       	pop	r28
    2e1e:	df 91       	pop	r29
    2e20:	08 95       	ret

00002e22 <HLED_voidTurnOn>:
 * HAL
 */


void HLED_voidTurnOn  (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    2e22:	df 93       	push	r29
    2e24:	cf 93       	push	r28
    2e26:	00 d0       	rcall	.+0      	; 0x2e28 <HLED_voidTurnOn+0x6>
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_SET);
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	6a 81       	ldd	r22, Y+2	; 0x02
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
}
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	08 95       	ret

00002e44 <HLED_voidTurnOff>:

void HLED_voidTurnOff (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <HLED_voidTurnOff+0x6>
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	89 83       	std	Y+1, r24	; 0x01
    2e50:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_RESET);
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	6a 81       	ldd	r22, Y+2	; 0x02
    2e56:	40 e0       	ldi	r20, 0x00	; 0
    2e58:	0e 94 bb 08 	call	0x1176	; 0x1176 <MDIO_voidSetPinValue>
}
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <HLED_voidToggleLED>:

void HLED_voidToggleLED (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <HLED_voidToggleLED+0x6>
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	89 83       	std	Y+1, r24	; 0x01
    2e72:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_DIOPort, A_PINID);
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	6a 81       	ldd	r22, Y+2	; 0x02
    2e78:	0e 94 5f 0a 	call	0x14be	; 0x14be <MDIO_voidTogglePinValue>
}
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	08 95       	ret

00002e86 <HSSD_voidDisplayNumber>:
#include "../Include/HAL/SSD/SSD_Private.h"
#include "../Include/HAL/SSD/SSD_Cfg.h"


void HSSD_voidDisplayNumber(DIO_PORT_e A_DIOPort,u8 A_u8NumberValue)
{
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <HSSD_voidDisplayNumber+0x6>
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <HSSD_voidDisplayNumber+0x8>
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	89 83       	std	Y+1, r24	; 0x01
    2e94:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if ((A_DIOPort <= DIO_PORTD) && (A_u8NumberValue >= 0) && (A_u8NumberValue <= 9))
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	84 30       	cpi	r24, 0x04	; 4
    2e9a:	08 f0       	brcs	.+2      	; 0x2e9e <HSSD_voidDisplayNumber+0x18>
    2e9c:	82 c0       	rjmp	.+260    	; 0x2fa2 <HSSD_voidDisplayNumber+0x11c>
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	8a 30       	cpi	r24, 0x0A	; 10
    2ea2:	08 f0       	brcs	.+2      	; 0x2ea6 <HSSD_voidDisplayNumber+0x20>
    2ea4:	7e c0       	rjmp	.+252    	; 0x2fa2 <HSSD_voidDisplayNumber+0x11c>
	{

		switch (A_u8NumberValue)
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	3c 83       	std	Y+4, r19	; 0x04
    2eae:	2b 83       	std	Y+3, r18	; 0x03
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	84 30       	cpi	r24, 0x04	; 4
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <HSSD_voidDisplayNumber+0x36>
    2eba:	55 c0       	rjmp	.+170    	; 0x2f66 <HSSD_voidDisplayNumber+0xe0>
    2ebc:	2b 81       	ldd	r18, Y+3	; 0x03
    2ebe:	3c 81       	ldd	r19, Y+4	; 0x04
    2ec0:	25 30       	cpi	r18, 0x05	; 5
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	dc f4       	brge	.+54     	; 0x2efc <HSSD_voidDisplayNumber+0x76>
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eca:	81 30       	cpi	r24, 0x01	; 1
    2ecc:	91 05       	cpc	r25, r1
    2ece:	09 f4       	brne	.+2      	; 0x2ed2 <HSSD_voidDisplayNumber+0x4c>
    2ed0:	3b c0       	rjmp	.+118    	; 0x2f48 <HSSD_voidDisplayNumber+0xc2>
    2ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ed6:	22 30       	cpi	r18, 0x02	; 2
    2ed8:	31 05       	cpc	r19, r1
    2eda:	2c f4       	brge	.+10     	; 0x2ee6 <HSSD_voidDisplayNumber+0x60>
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	69 f1       	breq	.+90     	; 0x2f3e <HSSD_voidDisplayNumber+0xb8>
    2ee4:	62 c0       	rjmp	.+196    	; 0x2faa <HSSD_voidDisplayNumber+0x124>
    2ee6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ee8:	3c 81       	ldd	r19, Y+4	; 0x04
    2eea:	22 30       	cpi	r18, 0x02	; 2
    2eec:	31 05       	cpc	r19, r1
    2eee:	89 f1       	breq	.+98     	; 0x2f52 <HSSD_voidDisplayNumber+0xcc>
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef4:	83 30       	cpi	r24, 0x03	; 3
    2ef6:	91 05       	cpc	r25, r1
    2ef8:	89 f1       	breq	.+98     	; 0x2f5c <HSSD_voidDisplayNumber+0xd6>
    2efa:	57 c0       	rjmp	.+174    	; 0x2faa <HSSD_voidDisplayNumber+0x124>
    2efc:	2b 81       	ldd	r18, Y+3	; 0x03
    2efe:	3c 81       	ldd	r19, Y+4	; 0x04
    2f00:	27 30       	cpi	r18, 0x07	; 7
    2f02:	31 05       	cpc	r19, r1
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <HSSD_voidDisplayNumber+0x82>
    2f06:	3e c0       	rjmp	.+124    	; 0x2f84 <HSSD_voidDisplayNumber+0xfe>
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	88 30       	cpi	r24, 0x08	; 8
    2f0e:	91 05       	cpc	r25, r1
    2f10:	5c f4       	brge	.+22     	; 0x2f28 <HSSD_voidDisplayNumber+0xa2>
    2f12:	2b 81       	ldd	r18, Y+3	; 0x03
    2f14:	3c 81       	ldd	r19, Y+4	; 0x04
    2f16:	25 30       	cpi	r18, 0x05	; 5
    2f18:	31 05       	cpc	r19, r1
    2f1a:	51 f1       	breq	.+84     	; 0x2f70 <HSSD_voidDisplayNumber+0xea>
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f20:	86 30       	cpi	r24, 0x06	; 6
    2f22:	91 05       	cpc	r25, r1
    2f24:	51 f1       	breq	.+84     	; 0x2f7a <HSSD_voidDisplayNumber+0xf4>
    2f26:	41 c0       	rjmp	.+130    	; 0x2faa <HSSD_voidDisplayNumber+0x124>
    2f28:	2b 81       	ldd	r18, Y+3	; 0x03
    2f2a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f2c:	28 30       	cpi	r18, 0x08	; 8
    2f2e:	31 05       	cpc	r19, r1
    2f30:	71 f1       	breq	.+92     	; 0x2f8e <HSSD_voidDisplayNumber+0x108>
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
    2f34:	9c 81       	ldd	r25, Y+4	; 0x04
    2f36:	89 30       	cpi	r24, 0x09	; 9
    2f38:	91 05       	cpc	r25, r1
    2f3a:	71 f1       	breq	.+92     	; 0x2f98 <HSSD_voidDisplayNumber+0x112>
    2f3c:	36 c0       	rjmp	.+108    	; 0x2faa <HSSD_voidDisplayNumber+0x124>
		{
		case 0:
			MDIO_voidSetPortValue(A_DIOPort, ZERO);
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	60 ec       	ldi	r22, 0xC0	; 192
    2f42:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
    2f46:	31 c0       	rjmp	.+98     	; 0x2faa <HSSD_voidDisplayNumber+0x124>
				break;
		case 1:
			MDIO_voidSetPortValue(A_DIOPort, ONE);
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	69 ef       	ldi	r22, 0xF9	; 249
    2f4c:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
    2f50:	2c c0       	rjmp	.+88     	; 0x2faa <HSSD_voidDisplayNumber+0x124>
				break;
		case 2:
			MDIO_voidSetPortValue(A_DIOPort, TWO);
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	64 ea       	ldi	r22, 0xA4	; 164
    2f56:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
    2f5a:	27 c0       	rjmp	.+78     	; 0x2faa <HSSD_voidDisplayNumber+0x124>
				break;
		case 3:
			MDIO_voidSetPortValue(A_DIOPort, THREE);
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	60 eb       	ldi	r22, 0xB0	; 176
    2f60:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
    2f64:	22 c0       	rjmp	.+68     	; 0x2faa <HSSD_voidDisplayNumber+0x124>
				break;
		case 4:
			MDIO_voidSetPortValue(A_DIOPort, FOUR);
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	69 e9       	ldi	r22, 0x99	; 153
    2f6a:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
    2f6e:	1d c0       	rjmp	.+58     	; 0x2faa <HSSD_voidDisplayNumber+0x124>
				break;
		case 5:
			MDIO_voidSetPortValue(A_DIOPort, FIVE);
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	62 e9       	ldi	r22, 0x92	; 146
    2f74:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
    2f78:	18 c0       	rjmp	.+48     	; 0x2faa <HSSD_voidDisplayNumber+0x124>
				break;
		case 6:
			MDIO_voidSetPortValue(A_DIOPort, SIX);
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	62 e8       	ldi	r22, 0x82	; 130
    2f7e:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
    2f82:	13 c0       	rjmp	.+38     	; 0x2faa <HSSD_voidDisplayNumber+0x124>
				break;
		case 7:
			MDIO_voidSetPortValue(A_DIOPort, SEVEN);
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	68 ef       	ldi	r22, 0xF8	; 248
    2f88:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
    2f8c:	0e c0       	rjmp	.+28     	; 0x2faa <HSSD_voidDisplayNumber+0x124>
				break;
		case 8:
			MDIO_voidSetPortValue(A_DIOPort, EIGHT);
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	60 e8       	ldi	r22, 0x80	; 128
    2f92:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
    2f96:	09 c0       	rjmp	.+18     	; 0x2faa <HSSD_voidDisplayNumber+0x124>
				break;
		case 9:
			MDIO_voidSetPortValue(A_DIOPort, NINE);
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	60 e9       	ldi	r22, 0x90	; 144
    2f9c:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
    2fa0:	04 c0       	rjmp	.+8      	; 0x2faa <HSSD_voidDisplayNumber+0x124>
			break;
		}
	}
	else
	{
		MDIO_voidSetPortValue(A_DIOPort,255);
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	6f ef       	ldi	r22, 0xFF	; 255
    2fa6:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPortValue>
	}
}
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <HSSD_voidDisplayNumbersAscending>:

void HSSD_voidDisplayNumbersAscending(DIO_PORT_e A_DIOPort, u16 A_u16TimetoWait)
{
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	62 97       	sbiw	r28, 0x12	; 18
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	88 8b       	std	Y+16, r24	; 0x10
    2fce:	7a 8b       	std	Y+18, r23	; 0x12
    2fd0:	69 8b       	std	Y+17, r22	; 0x11
	if((A_DIOPort <=DIO_PORTD))
    2fd2:	88 89       	ldd	r24, Y+16	; 0x10
    2fd4:	84 30       	cpi	r24, 0x04	; 4
    2fd6:	08 f0       	brcs	.+2      	; 0x2fda <HSSD_voidDisplayNumbersAscending+0x22>
    2fd8:	86 c0       	rjmp	.+268    	; 0x30e6 <HSSD_voidDisplayNumbersAscending+0x12e>
	{
		for(u8 i=0 ; i<=9 ; i++)
    2fda:	1f 86       	std	Y+15, r1	; 0x0f
    2fdc:	80 c0       	rjmp	.+256    	; 0x30de <HSSD_voidDisplayNumbersAscending+0x126>
		{
			HSSD_voidDisplayNumber(A_DIOPort , i);
    2fde:	88 89       	ldd	r24, Y+16	; 0x10
    2fe0:	6f 85       	ldd	r22, Y+15	; 0x0f
    2fe2:	0e 94 43 17 	call	0x2e86	; 0x2e86 <HSSD_voidDisplayNumber>
			_delay_ms(A_u16TimetoWait);
    2fe6:	89 89       	ldd	r24, Y+17	; 0x11
    2fe8:	9a 89       	ldd	r25, Y+18	; 0x12
    2fea:	cc 01       	movw	r24, r24
    2fec:	a0 e0       	ldi	r26, 0x00	; 0
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	8b 87       	std	Y+11, r24	; 0x0b
    2ffe:	9c 87       	std	Y+12, r25	; 0x0c
    3000:	ad 87       	std	Y+13, r26	; 0x0d
    3002:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3004:	6b 85       	ldd	r22, Y+11	; 0x0b
    3006:	7c 85       	ldd	r23, Y+12	; 0x0c
    3008:	8d 85       	ldd	r24, Y+13	; 0x0d
    300a:	9e 85       	ldd	r25, Y+14	; 0x0e
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	4a ef       	ldi	r20, 0xFA	; 250
    3012:	54 e4       	ldi	r21, 0x44	; 68
    3014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	8f 83       	std	Y+7, r24	; 0x07
    301e:	98 87       	std	Y+8, r25	; 0x08
    3020:	a9 87       	std	Y+9, r26	; 0x09
    3022:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3024:	6f 81       	ldd	r22, Y+7	; 0x07
    3026:	78 85       	ldd	r23, Y+8	; 0x08
    3028:	89 85       	ldd	r24, Y+9	; 0x09
    302a:	9a 85       	ldd	r25, Y+10	; 0x0a
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	40 e8       	ldi	r20, 0x80	; 128
    3032:	5f e3       	ldi	r21, 0x3F	; 63
    3034:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3038:	88 23       	and	r24, r24
    303a:	2c f4       	brge	.+10     	; 0x3046 <HSSD_voidDisplayNumbersAscending+0x8e>
		__ticks = 1;
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	9e 83       	std	Y+6, r25	; 0x06
    3042:	8d 83       	std	Y+5, r24	; 0x05
    3044:	3f c0       	rjmp	.+126    	; 0x30c4 <HSSD_voidDisplayNumbersAscending+0x10c>
	else if (__tmp > 65535)
    3046:	6f 81       	ldd	r22, Y+7	; 0x07
    3048:	78 85       	ldd	r23, Y+8	; 0x08
    304a:	89 85       	ldd	r24, Y+9	; 0x09
    304c:	9a 85       	ldd	r25, Y+10	; 0x0a
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	3f ef       	ldi	r19, 0xFF	; 255
    3052:	4f e7       	ldi	r20, 0x7F	; 127
    3054:	57 e4       	ldi	r21, 0x47	; 71
    3056:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    305a:	18 16       	cp	r1, r24
    305c:	4c f5       	brge	.+82     	; 0x30b0 <HSSD_voidDisplayNumbersAscending+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    305e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3060:	7c 85       	ldd	r23, Y+12	; 0x0c
    3062:	8d 85       	ldd	r24, Y+13	; 0x0d
    3064:	9e 85       	ldd	r25, Y+14	; 0x0e
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e2       	ldi	r20, 0x20	; 32
    306c:	51 e4       	ldi	r21, 0x41	; 65
    306e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	bc 01       	movw	r22, r24
    3078:	cd 01       	movw	r24, r26
    307a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	9e 83       	std	Y+6, r25	; 0x06
    3084:	8d 83       	std	Y+5, r24	; 0x05
    3086:	0f c0       	rjmp	.+30     	; 0x30a6 <HSSD_voidDisplayNumbersAscending+0xee>
    3088:	88 ec       	ldi	r24, 0xC8	; 200
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	9c 83       	std	Y+4, r25	; 0x04
    308e:	8b 83       	std	Y+3, r24	; 0x03
    3090:	8b 81       	ldd	r24, Y+3	; 0x03
    3092:	9c 81       	ldd	r25, Y+4	; 0x04
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	f1 f7       	brne	.-4      	; 0x3094 <HSSD_voidDisplayNumbersAscending+0xdc>
    3098:	9c 83       	std	Y+4, r25	; 0x04
    309a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309c:	8d 81       	ldd	r24, Y+5	; 0x05
    309e:	9e 81       	ldd	r25, Y+6	; 0x06
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	9e 83       	std	Y+6, r25	; 0x06
    30a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a6:	8d 81       	ldd	r24, Y+5	; 0x05
    30a8:	9e 81       	ldd	r25, Y+6	; 0x06
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	69 f7       	brne	.-38     	; 0x3088 <HSSD_voidDisplayNumbersAscending+0xd0>
    30ae:	14 c0       	rjmp	.+40     	; 0x30d8 <HSSD_voidDisplayNumbersAscending+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b0:	6f 81       	ldd	r22, Y+7	; 0x07
    30b2:	78 85       	ldd	r23, Y+8	; 0x08
    30b4:	89 85       	ldd	r24, Y+9	; 0x09
    30b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	9e 83       	std	Y+6, r25	; 0x06
    30c2:	8d 83       	std	Y+5, r24	; 0x05
    30c4:	8d 81       	ldd	r24, Y+5	; 0x05
    30c6:	9e 81       	ldd	r25, Y+6	; 0x06
    30c8:	9a 83       	std	Y+2, r25	; 0x02
    30ca:	89 83       	std	Y+1, r24	; 0x01
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	9a 81       	ldd	r25, Y+2	; 0x02
    30d0:	01 97       	sbiw	r24, 0x01	; 1
    30d2:	f1 f7       	brne	.-4      	; 0x30d0 <HSSD_voidDisplayNumbersAscending+0x118>
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	89 83       	std	Y+1, r24	; 0x01

void HSSD_voidDisplayNumbersAscending(DIO_PORT_e A_DIOPort, u16 A_u16TimetoWait)
{
	if((A_DIOPort <=DIO_PORTD))
	{
		for(u8 i=0 ; i<=9 ; i++)
    30d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    30da:	8f 5f       	subi	r24, 0xFF	; 255
    30dc:	8f 87       	std	Y+15, r24	; 0x0f
    30de:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e0:	8a 30       	cpi	r24, 0x0A	; 10
    30e2:	08 f4       	brcc	.+2      	; 0x30e6 <HSSD_voidDisplayNumbersAscending+0x12e>
    30e4:	7c cf       	rjmp	.-264    	; 0x2fde <HSSD_voidDisplayNumbersAscending+0x26>
	}
	else
	{
		//do nth..
	}
}
    30e6:	62 96       	adiw	r28, 0x12	; 18
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	08 95       	ret

000030f8 <HSSD_voidDisplayNumbersDescending>:

void HSSD_voidDisplayNumbersDescending(DIO_PORT_e A_DIOPort, u16 A_u16TimetoWait)
{
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	62 97       	sbiw	r28, 0x12	; 18
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	88 8b       	std	Y+16, r24	; 0x10
    310e:	7a 8b       	std	Y+18, r23	; 0x12
    3110:	69 8b       	std	Y+17, r22	; 0x11
	if((A_DIOPort <=DIO_PORTD))
    3112:	88 89       	ldd	r24, Y+16	; 0x10
    3114:	84 30       	cpi	r24, 0x04	; 4
    3116:	08 f0       	brcs	.+2      	; 0x311a <HSSD_voidDisplayNumbersDescending+0x22>
    3118:	83 c0       	rjmp	.+262    	; 0x3220 <HSSD_voidDisplayNumbersDescending+0x128>
	{
		for(u8 i=9 ; i>=0 ; i--)
    311a:	89 e0       	ldi	r24, 0x09	; 9
    311c:	8f 87       	std	Y+15, r24	; 0x0f
		{
			HSSD_voidDisplayNumber(A_DIOPort , i);
    311e:	88 89       	ldd	r24, Y+16	; 0x10
    3120:	6f 85       	ldd	r22, Y+15	; 0x0f
    3122:	0e 94 43 17 	call	0x2e86	; 0x2e86 <HSSD_voidDisplayNumber>
			_delay_ms(A_u16TimetoWait);
    3126:	89 89       	ldd	r24, Y+17	; 0x11
    3128:	9a 89       	ldd	r25, Y+18	; 0x12
    312a:	cc 01       	movw	r24, r24
    312c:	a0 e0       	ldi	r26, 0x00	; 0
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	8b 87       	std	Y+11, r24	; 0x0b
    313e:	9c 87       	std	Y+12, r25	; 0x0c
    3140:	ad 87       	std	Y+13, r26	; 0x0d
    3142:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3144:	6b 85       	ldd	r22, Y+11	; 0x0b
    3146:	7c 85       	ldd	r23, Y+12	; 0x0c
    3148:	8d 85       	ldd	r24, Y+13	; 0x0d
    314a:	9e 85       	ldd	r25, Y+14	; 0x0e
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	4a ef       	ldi	r20, 0xFA	; 250
    3152:	54 e4       	ldi	r21, 0x44	; 68
    3154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	8f 83       	std	Y+7, r24	; 0x07
    315e:	98 87       	std	Y+8, r25	; 0x08
    3160:	a9 87       	std	Y+9, r26	; 0x09
    3162:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3164:	6f 81       	ldd	r22, Y+7	; 0x07
    3166:	78 85       	ldd	r23, Y+8	; 0x08
    3168:	89 85       	ldd	r24, Y+9	; 0x09
    316a:	9a 85       	ldd	r25, Y+10	; 0x0a
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	40 e8       	ldi	r20, 0x80	; 128
    3172:	5f e3       	ldi	r21, 0x3F	; 63
    3174:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3178:	88 23       	and	r24, r24
    317a:	2c f4       	brge	.+10     	; 0x3186 <HSSD_voidDisplayNumbersDescending+0x8e>
		__ticks = 1;
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	9e 83       	std	Y+6, r25	; 0x06
    3182:	8d 83       	std	Y+5, r24	; 0x05
    3184:	3f c0       	rjmp	.+126    	; 0x3204 <HSSD_voidDisplayNumbersDescending+0x10c>
	else if (__tmp > 65535)
    3186:	6f 81       	ldd	r22, Y+7	; 0x07
    3188:	78 85       	ldd	r23, Y+8	; 0x08
    318a:	89 85       	ldd	r24, Y+9	; 0x09
    318c:	9a 85       	ldd	r25, Y+10	; 0x0a
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	3f ef       	ldi	r19, 0xFF	; 255
    3192:	4f e7       	ldi	r20, 0x7F	; 127
    3194:	57 e4       	ldi	r21, 0x47	; 71
    3196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    319a:	18 16       	cp	r1, r24
    319c:	4c f5       	brge	.+82     	; 0x31f0 <HSSD_voidDisplayNumbersDescending+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319e:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e2       	ldi	r20, 0x20	; 32
    31ac:	51 e4       	ldi	r21, 0x41	; 65
    31ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	bc 01       	movw	r22, r24
    31b8:	cd 01       	movw	r24, r26
    31ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	9e 83       	std	Y+6, r25	; 0x06
    31c4:	8d 83       	std	Y+5, r24	; 0x05
    31c6:	0f c0       	rjmp	.+30     	; 0x31e6 <HSSD_voidDisplayNumbersDescending+0xee>
    31c8:	88 ec       	ldi	r24, 0xC8	; 200
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	9c 83       	std	Y+4, r25	; 0x04
    31ce:	8b 83       	std	Y+3, r24	; 0x03
    31d0:	8b 81       	ldd	r24, Y+3	; 0x03
    31d2:	9c 81       	ldd	r25, Y+4	; 0x04
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	f1 f7       	brne	.-4      	; 0x31d4 <HSSD_voidDisplayNumbersDescending+0xdc>
    31d8:	9c 83       	std	Y+4, r25	; 0x04
    31da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31dc:	8d 81       	ldd	r24, Y+5	; 0x05
    31de:	9e 81       	ldd	r25, Y+6	; 0x06
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	9e 83       	std	Y+6, r25	; 0x06
    31e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e6:	8d 81       	ldd	r24, Y+5	; 0x05
    31e8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ea:	00 97       	sbiw	r24, 0x00	; 0
    31ec:	69 f7       	brne	.-38     	; 0x31c8 <HSSD_voidDisplayNumbersDescending+0xd0>
    31ee:	14 c0       	rjmp	.+40     	; 0x3218 <HSSD_voidDisplayNumbersDescending+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f0:	6f 81       	ldd	r22, Y+7	; 0x07
    31f2:	78 85       	ldd	r23, Y+8	; 0x08
    31f4:	89 85       	ldd	r24, Y+9	; 0x09
    31f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	9e 83       	std	Y+6, r25	; 0x06
    3202:	8d 83       	std	Y+5, r24	; 0x05
    3204:	8d 81       	ldd	r24, Y+5	; 0x05
    3206:	9e 81       	ldd	r25, Y+6	; 0x06
    3208:	9a 83       	std	Y+2, r25	; 0x02
    320a:	89 83       	std	Y+1, r24	; 0x01
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	9a 81       	ldd	r25, Y+2	; 0x02
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	f1 f7       	brne	.-4      	; 0x3210 <HSSD_voidDisplayNumbersDescending+0x118>
    3214:	9a 83       	std	Y+2, r25	; 0x02
    3216:	89 83       	std	Y+1, r24	; 0x01

void HSSD_voidDisplayNumbersDescending(DIO_PORT_e A_DIOPort, u16 A_u16TimetoWait)
{
	if((A_DIOPort <=DIO_PORTD))
	{
		for(u8 i=9 ; i>=0 ; i--)
    3218:	8f 85       	ldd	r24, Y+15	; 0x0f
    321a:	81 50       	subi	r24, 0x01	; 1
    321c:	8f 87       	std	Y+15, r24	; 0x0f
    321e:	7f cf       	rjmp	.-258    	; 0x311e <HSSD_voidDisplayNumbersDescending+0x26>
	}
	else
	{
		//do nth..
	}
}
    3220:	62 96       	adiw	r28, 0x12	; 18
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <func>:
#include "../Include/HAL/LED/LED_Interface.h"

#define F_CPU 8000000UL

void func (void)
{
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
	HLED_voidToggleLED(DIO_PORTA,PIN0);
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	0e 94 33 17 	call	0x2e66	; 0x2e66 <HLED_voidToggleLED>
}
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	08 95       	ret

00003248 <main>:
int main (void)

{
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
    3250:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <MDIO_voidInit>
	MEXTI_voidConfig(EXTI0,FALLING_EDGE);
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	62 e0       	ldi	r22, 0x02	; 2
    3258:	0e 94 8d 0b 	call	0x171a	; 0x171a <MEXTI_voidConfig>
	MEXTI_voidCallback(EXTI0,func);
    325c:	29 e1       	ldi	r18, 0x19	; 25
    325e:	39 e1       	ldi	r19, 0x19	; 25
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	b9 01       	movw	r22, r18
    3264:	0e 94 75 0c 	call	0x18ea	; 0x18ea <MEXTI_voidCallback>
	MEXTI_voidEnable(EXTI0);
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	0e 94 01 0c 	call	0x1802	; 0x1802 <MEXTI_voidEnable>
	MGI_voidEnable();
    326e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <MGI_voidEnable>
    3272:	ff cf       	rjmp	.-2      	; 0x3272 <main+0x2a>

00003274 <__mulsi3>:
    3274:	62 9f       	mul	r22, r18
    3276:	d0 01       	movw	r26, r0
    3278:	73 9f       	mul	r23, r19
    327a:	f0 01       	movw	r30, r0
    327c:	82 9f       	mul	r24, r18
    327e:	e0 0d       	add	r30, r0
    3280:	f1 1d       	adc	r31, r1
    3282:	64 9f       	mul	r22, r20
    3284:	e0 0d       	add	r30, r0
    3286:	f1 1d       	adc	r31, r1
    3288:	92 9f       	mul	r25, r18
    328a:	f0 0d       	add	r31, r0
    328c:	83 9f       	mul	r24, r19
    328e:	f0 0d       	add	r31, r0
    3290:	74 9f       	mul	r23, r20
    3292:	f0 0d       	add	r31, r0
    3294:	65 9f       	mul	r22, r21
    3296:	f0 0d       	add	r31, r0
    3298:	99 27       	eor	r25, r25
    329a:	72 9f       	mul	r23, r18
    329c:	b0 0d       	add	r27, r0
    329e:	e1 1d       	adc	r30, r1
    32a0:	f9 1f       	adc	r31, r25
    32a2:	63 9f       	mul	r22, r19
    32a4:	b0 0d       	add	r27, r0
    32a6:	e1 1d       	adc	r30, r1
    32a8:	f9 1f       	adc	r31, r25
    32aa:	bd 01       	movw	r22, r26
    32ac:	cf 01       	movw	r24, r30
    32ae:	11 24       	eor	r1, r1
    32b0:	08 95       	ret

000032b2 <__udivmodsi4>:
    32b2:	a1 e2       	ldi	r26, 0x21	; 33
    32b4:	1a 2e       	mov	r1, r26
    32b6:	aa 1b       	sub	r26, r26
    32b8:	bb 1b       	sub	r27, r27
    32ba:	fd 01       	movw	r30, r26
    32bc:	0d c0       	rjmp	.+26     	; 0x32d8 <__udivmodsi4_ep>

000032be <__udivmodsi4_loop>:
    32be:	aa 1f       	adc	r26, r26
    32c0:	bb 1f       	adc	r27, r27
    32c2:	ee 1f       	adc	r30, r30
    32c4:	ff 1f       	adc	r31, r31
    32c6:	a2 17       	cp	r26, r18
    32c8:	b3 07       	cpc	r27, r19
    32ca:	e4 07       	cpc	r30, r20
    32cc:	f5 07       	cpc	r31, r21
    32ce:	20 f0       	brcs	.+8      	; 0x32d8 <__udivmodsi4_ep>
    32d0:	a2 1b       	sub	r26, r18
    32d2:	b3 0b       	sbc	r27, r19
    32d4:	e4 0b       	sbc	r30, r20
    32d6:	f5 0b       	sbc	r31, r21

000032d8 <__udivmodsi4_ep>:
    32d8:	66 1f       	adc	r22, r22
    32da:	77 1f       	adc	r23, r23
    32dc:	88 1f       	adc	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	1a 94       	dec	r1
    32e2:	69 f7       	brne	.-38     	; 0x32be <__udivmodsi4_loop>
    32e4:	60 95       	com	r22
    32e6:	70 95       	com	r23
    32e8:	80 95       	com	r24
    32ea:	90 95       	com	r25
    32ec:	9b 01       	movw	r18, r22
    32ee:	ac 01       	movw	r20, r24
    32f0:	bd 01       	movw	r22, r26
    32f2:	cf 01       	movw	r24, r30
    32f4:	08 95       	ret

000032f6 <__prologue_saves__>:
    32f6:	2f 92       	push	r2
    32f8:	3f 92       	push	r3
    32fa:	4f 92       	push	r4
    32fc:	5f 92       	push	r5
    32fe:	6f 92       	push	r6
    3300:	7f 92       	push	r7
    3302:	8f 92       	push	r8
    3304:	9f 92       	push	r9
    3306:	af 92       	push	r10
    3308:	bf 92       	push	r11
    330a:	cf 92       	push	r12
    330c:	df 92       	push	r13
    330e:	ef 92       	push	r14
    3310:	ff 92       	push	r15
    3312:	0f 93       	push	r16
    3314:	1f 93       	push	r17
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	ca 1b       	sub	r28, r26
    3320:	db 0b       	sbc	r29, r27
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	09 94       	ijmp

0000332e <__epilogue_restores__>:
    332e:	2a 88       	ldd	r2, Y+18	; 0x12
    3330:	39 88       	ldd	r3, Y+17	; 0x11
    3332:	48 88       	ldd	r4, Y+16	; 0x10
    3334:	5f 84       	ldd	r5, Y+15	; 0x0f
    3336:	6e 84       	ldd	r6, Y+14	; 0x0e
    3338:	7d 84       	ldd	r7, Y+13	; 0x0d
    333a:	8c 84       	ldd	r8, Y+12	; 0x0c
    333c:	9b 84       	ldd	r9, Y+11	; 0x0b
    333e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3340:	b9 84       	ldd	r11, Y+9	; 0x09
    3342:	c8 84       	ldd	r12, Y+8	; 0x08
    3344:	df 80       	ldd	r13, Y+7	; 0x07
    3346:	ee 80       	ldd	r14, Y+6	; 0x06
    3348:	fd 80       	ldd	r15, Y+5	; 0x05
    334a:	0c 81       	ldd	r16, Y+4	; 0x04
    334c:	1b 81       	ldd	r17, Y+3	; 0x03
    334e:	aa 81       	ldd	r26, Y+2	; 0x02
    3350:	b9 81       	ldd	r27, Y+1	; 0x01
    3352:	ce 0f       	add	r28, r30
    3354:	d1 1d       	adc	r29, r1
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	ed 01       	movw	r28, r26
    3362:	08 95       	ret

00003364 <_exit>:
    3364:	f8 94       	cli

00003366 <__stop_program>:
    3366:	ff cf       	rjmp	.-2      	; 0x3366 <__stop_program>
